// 07_Standard_Methods_184-199


// 184 Степень и корень в JavaScript

// 1 Возведите 2 в 10 степень.
// console.log(Math.pow(2, 10));


// 2 Найдите квадратный корень из 245.
// console.log(Math.sqrt(245));


// 3 Найдите квадратный корень из суммы кубов его элементов. Для решения воспользуйтесь циклом for.
// let arr = [4, 2, 5, 19, 13, 0, 10];
// let cubeSum = 0;

// for of
// for (let number of arr) {
//     let cube = Math.pow(number, 3);
//     console.log(cube);
//     cubeSum += cube;
// }

// for i
// for (let i = 0; i < arr.length; i++) {
//     let cube = Math.pow(arr[i], 3);
//     console.log(cube);
//     cubeSum += cube;
// }

// console.log(cubeSum);
// let squareRoot = Math.sqrt(cubeSum)
// console.log(squareRoot);


// 185 Функции округления в JavaScript

// 1 Найдите квадратный корень из 379. Результат округлите до целых, до десятых, до сотых.

// let number = 379;
// let sqrt = Math.sqrt(number);
// console.log(sqrt);
//
// let round = Math.round(sqrt);
// console.log(round);
//
// let tenths = sqrt.toFixed(1);
// console.log(tenths);
//
// let tenthsP = sqrt.toPrecision(3);
// console.log(tenthsP);
//
// let hundredths = sqrt.toFixed(2);
// console.log(hundredths);
//
// let hundredthsP = sqrt.toPrecision(4);
// console.log(hundredthsP);


// 2 Найдите квадратный корень из 587. Округлите результат в большую и меньшую стороны,
// запишите результаты округления в объект с ключами 'floor' и 'ceil'

// let sqrt = Math.sqrt(587);
// console.log(sqrt);
//
// let floor = Math.floor(sqrt)
// console.log(floor);
//
// let ceil = Math.ceil(sqrt)
// console.log(ceil);
//
// let obj = { 'floor': floor, ceil }
// console.log(obj);


// 186 Экстремальные числа в JavaScript

// 1 Даны числа 4, -2, 5, 19, -130, 0, 10. Найдите минимальное и максимальное число.
// let arr = [4, -2, 5, 19, -130, 0, 10];
//
// console.log(Math.max(...arr));
// console.log(Math.max.apply(null, arr));
//
// console.log(Math.min(...arr));
// console.log(Math.min.apply(null, arr));


// 187 Рандом в JavaScript

// Теория
// Метод Math.random возвращает случайное дробное число от 0 до 1.
// console.log(Math.random());

// Получение случайного дробного числа между min и max
// function getRandomArbitary(min, max) {
//     return Math.random() * (max- min) + min;
// }
//
// console.log(getRandomArbitary(22, 44));

// Получение случайного целого числа между min и max
// function getRandomInt(min, max) {
//     return Math.floor(Math.random() * (max - min + 1)) + min;
// }
//
// console.log(getRandomInt(22, 44));


// 1 Выведите на экран случайное целое число от 1 до 100.
// function getRandomInt(min, max) {
//     return Math.floor(Math.random() * (max - min + 1)) + min;
// }
//
// console.log(getRandomInt(1, 100));


// 2 С помощью цикла заполните массив 10-ю случайными целыми числами.
// let arr = [];
//
// function getRandomInt(min, max) {
//     for (let i = 0; i < 10; i++) {
//         arr.push(Math.floor(Math.random() * (max - min + 1)) + min);
//     }
// }
// getRandomInt(1, 100)
// console.log(arr);


// 188 Модули в JavaScript

// Теория
// Метод Math.abs возвращает модуль числа, то есть из отрицательного числа делает положительное.

// 1 Даны переменные a и b. Найдите модуль разности a и b. Проверьте работу скрипта самостоятельно для различных a и b.
// let a = -2;
// let b = 9;
//
// console.log(Math.abs(a));
// console.log(Math.abs(b));
//
// let difference = a * b;
//
// console.log(Math.abs(difference));


// 189 Регистр символов в JavaScript

// Теория
// Метод toUpperCase производит преобразование строки в верхний регистр (из маленьких букв делает большие).
// При этом возвращается новая строка, а исходная строка не меняется.

// Также используя метод slice можно преобразовать в верхний регистр отдельные буквы:
// let str = 'abcde';
// let res = str.slice(0, 1).toUpperCase() + str.slice(1);
// console.log(res);


// Метод toLowerCase преобразует символы строки в нижний регистр (из больших букв делает маленькие).
// При этом мы получаем новую строку, а исходная строка остается неизменной.

// Комбинируя метод toLowerCase и метод slice можно задать нижний регистр для отдельных частей строки:
// let str = 'ABCDE';
// let res = str.slice(0, 1) + str.slice(1).toLowerCase();
// console.log(res);

// 1 Дана строка 'js'. Сделайте из нее строку 'JS'.
// let str = 'js';
// let res = str.toUpperCase();
// console.log(res);

// 2 Дана строка 'JS'. Сделайте из нее строку 'js'.
// let str = 'JS';
// let res = str.toLowerCase();
// console.log(res);


// 190 Вырезание строк в JavaScript

// Теория

// substr
// Метод substr возвращает подстроку из строки (исходная строка при этом не изменяется). Первый параметр задает номер
// позиции, с которого метод начнет вырезать символ (нумерация идет с нуля), а второй параметр - сколько символов отрезать.
//
// Первый параметр может принимать отрицательные значения. В этом случае отсчет символа, с которого начинается
// обрезание, будет идти с конца строки. Последний символ имеет номер -1. Второй параметр не является обязательным,
// если он не указан, то вырезаны будут все символы до конца строки.
// строка.substr(откуда отрезать, [сколько символов отрезать]);


// substring
// Метод substring возвращает подстроку из строки (исходная строка при этом не изменяется). Первый параметр задает номер
// символа, с которого метод начинает отрезать (нумерация идет с нуля), а второй параметр - номер символа, на котором
// следует закончить вырезание (символ с этим номером не включается в вырезанную часть).
// Второй параметр не является обязательным, если он не указан, то вырезаны будут все символы до конца строки.
// строка.substring(откуда начать отрезать, [докуда отрезать]);


// slice
// Метод slice возвращает подстроку из строки (исходная строка при этом не изменяется). Первым параметром указывается
// номер символа строки, с которого начинается вырезание, а вторым параметром - номер символа, на котором закончится
// вырезание (при этом символ с этим номером не включится в вырезанную часть). Второй параметр не является обязательным.
// Если его не указать - подстрока возьмется с указанного в первом параметре символа до конца строки. Он также может
// принимать отрицательные значения. В этом случае отсчет символа, на котором закончится обрезание, начинается с конца
// строки. Последний символ имеет номер -1.
// строка.slice(откуда отрезать, [докуда отрезать]);


// 1 Дана строка 'я учу javascript!'.
// Вырежьте из нее слово 'учу' и слово 'javascript' тремя разными способами (через substr, substring, slice).
// let str = 'я учу javascript!';
// console.log(str.substr(2));
// console.log(str.substr(2, 3));
// console.log(str.substr(6));
// console.log(str.substr(-11));
//
// console.log(str.substring(2));
// console.log(str.substring(2, 5));
// console.log(str.substring(6));
//
// console.log(str.slice(2));
// console.log(str.slice(2, 5));
// console.log(str.slice(6));
// console.log(str.slice(-11));
//
// console.log(str);


// 191 Поиск по строкам в JavaScript

// Теория

// includes
// Метод includes выполняет поиск заданной строки в текущей с учетом регистра. Первым параметром метод принимает строку,
// которую нужно найти, вторым необязательным - позицию, с которой нужно начинать поиск.
// После выполнения метод возвращает true или false.
// строка.includes(что ищем, [откуда начинать поиск]);

// startsWith
// Метод startsWith проверяет начинается ли строка с указанной в первом параметре подстроки. Если начинается,
// то возвращает true, а если не начинается, то false. Вторым необязательным параметром метод принимает позицию,
// с которой начинать проверку (по умолчанию с начала строки).
// строка.startsWith(что ищем, [начало проверки])

// endsWith
// Метод endsWith проверяет, заканчивается ли строка на указанную в первом параметре подстроку. Если заканчивается,
// то возвращает true, а если не заканчивается,то false. Вторым необязательным параметром можно принудительно указать
// длину строки. В этом случае проверка будет не настоящего конца строки, а указанного.
// строка.endsWith(что ищем, [длина строки]);

// indexOf
// Метод indexOf осуществляет поиск подстроки в строке. В первом параметре указываем искомую подстроку в нужном нам
// регистре (большие буквы или маленькие). Метод вернет позицию первого совпадения, а если оно не найдено, то вернет -1.
// Вторым необязательным параметром можно передать номер символа, откуда следует начинать поиск.
// строка.indexOf(что ищем, [откуда начинать поиск]);

// lastIndexOf
// Метод lastIndexOf осуществляет поиск последнего вхождения подстроки в строке. При этом необходимо обращать внимание
// на указанный в первом параметре регистр символов. Поиск ведется с конца строки. Метод вернет позицию первого
// совпадения с конца, а если оно не найдено, то вернет -1. Вторым необязательным параметром можно передать номер
// символа, откуда следует начинать поиск.
// строка.lastIndexOf(что ищем, [откуда начинать поиск]);

// 1 Дана строка. Проверьте, начинается ли эта строка на 'http://'.
// let str = 'http://';

// let res = str.includes('http://', 0);
// let res = str.startsWith('http://');
// let res = str.indexOf('http://');

// console.log(res);

// 2 Дана строка. Проверьте, заканчивается ли эта строка на '.html'.
// let str = '.html';

// let res = str.includes('.html');
// let res = str.endsWith('.html');
// let res = str.lastIndexOf('.html');

// console.log(res);


// 192 Замена частей строки в JavaScript

// Теория

// replace
// Метод replace осуществляет поиск и замену частей строки. Первым параметром принимается подстрока, которую заменяем,
// а вторым - подстрока, на которую заменяем.
// строка.replace(что заменяем, на что заменяем);

// 1 Дана строка '1-2-3-4-5'. Поменяйте все дефисы на точки.
let str = '1-2-3-4-5';

while (str.includes('-')) {
    str = str.replace('-', '.')
}

console.log(str);


// 193