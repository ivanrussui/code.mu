// Коллекции Set


// 37) Введение / Коллекции Set в JavaScript
//
// Коллекции Set позволяют создать массивы без дублей. Давайте посмотрим, как работать с такими коллекциями.
// Для начала нужно создать коллекцию с помощью следующей команды:
// let set = new Set;
//
// После создания коллекции в нее можно добавлять новые элементы с помощью метода add:
// let set = new Set;
//
// set.add(1);
// set.add(2);
// set.add(3);
//
// При этом при попытке добавить уже существующий в коллекции элемент нового добавления не произойдет:
// let set = new Set;
//
// set.add(1);
// set.add(2);
// set.add(3);
// set.add(3); // не добавится, т.к. уже есть


// 1 Создайте коллекцию Set. С помощью метода add добавьте в нее элементы.
// Убедитесь, что дубли элементов не добавляются.
//
// let set = new Set;
//
// set.add('a');
// set.add('b');
// set.add('b');
// set.add('c');
//
// console.log(set);


// 38) Начальное заполнение / Начальное заполнение коллекции Set в JavaScript
//
// Можно при создании заполнить коллекцию Set некоторыми значениями, передав параметром массив с данными:
// let set = new Set([1, 2, 3]);
//
// При этом если в массиве будут дубли, то в коллекции они исчезнут:
// let set = new Set([1, 2, 3, 3, 4, 4, 5]);
// console.log(set); // будет [1, 2, 3, 4, 5]


// 1 Дан массив с числами:
// let arr = [1, 2, 3, 1, 3, 4];
// С помощью этого массива создайте коллекцию Set.
//
// let set = new Set(arr);
// console.log(set);


// 2 Создайте коллекцию Set с начальными значениями 1, 2 и 3. С помощью метода add добавьте в коллекцию
// еще одно число 2. Выведите содержимое коллекции в консоль, убедитесь, что число 2 не добавилось второй раз.
//
// let set = new Set([1, 2, 3]);
// set.add(2);
// console.log(set);


// 39) Полезные возможности / Полезные возможности коллекций Set
//
// Коллекции Set имеют ряд полезных свойств и методов. Давайте их разберем.
//
// Размер коллекции
// В свойстве size содержится размер коллекции:
// let set = new Set;
//
// set.add(1);
// set.add(2);
// set.add(3);
//
// console.log(set.size);
//
// Проверка наличия значения
// Проверить наличие значения в коллекции можно с помощью метода has:
// let set = new Set;
//
// set.add(1);
// set.add(2);
// set.add(3);
//
// console.log(set.has(1));
//
// Удаление элементов
// Удалить элемент из коллекции можно с помощью метода delete:
// let set = new Set;
//
// set.add(1);
// set.add(2);
// set.add(3);
//
// set.delete(1);
//
// Очистка коллекции
// Очистить всю коллекцию можно с помощью метода clear:
// let set = new Set;
//
// set.add(1);
// set.add(2);
// set.add(3);
//
// set.clear();


// Практические задачи

// 1 Создайте коллекцию Set с начальными значениями 1, 2 и 3. Выведите на экран количество элементов в коллекции.
//
// let set = new Set([1, 2, 3]);
// console.log(set.size);

// 2 Создайте коллекцию Set с начальными значениями 1, 2 и 3. Проверьте наличие в коллекции элемента со значением 3,
// а затем элемента со значением 4.
//
// console.log(set.has(3));
// console.log(set.has(4));


// 40) Перебор циклом / Перебор коллекций Set циклом
//
// Пусть у нас есть некоторая коллекция Set:
// let set = new Set;
//
// set.add(1);
// set.add(2);
// set.add(3);
//
// Давайте переберем ее циклом:
// for (let elem of set) {
// 	console.log(elem);
// }


// 1 Создайте коллекцию Set с какими-нибудь числами. Переберите эту коллекцию циклом и найдите сумму ее элементов.
//
// let set = new Set;
//
// set.add(5);
// set.add(10);
// set.add(55);
//
// let sum = 0;
// for (let elem of set) {
//     sum += elem;
// }
// console.log(sum);


// 41) Преобразование / Преобразование коллекций Set
//
// Коллекции Set можно преобразовывать в массивы.
// Можно также выполнять обратную операцию - массивы преобразовывать в Set. Давайте посмотрим, как это делается.
//
// Преобразование в массив
// Пусть у нас есть некоторая коллекция Set:
// let set = new Set([1, 2, 3]);
//
// Можно преобразовать ее в массив, используя прием с деструктуриацией:
// let arr = [...set];
//
// А можно воспользоваться методом Array.from:
// let arr = Array.from(set);


// 1 Дана коллекция Set. Преобразуйте ее в массив двумя описанными способами.
//
// let set = new Set([12, 44, 78]);
//
// console.log(set);
// console.log([...set]);
// console.log(Array.from(set));


// Преобразование массива в Set
// Пусть у нас есть массив:
// let arr = [1, 2, 3];
//
// Давайте преобразуем его в коллекцию Set:
// let set = new Set(arr);


// 1 Дан массив. Преобразуйте его в коллекцию.
//
// let arr = ['a', 'b', 'c'];
//
// console.log(arr);
// console.log(new Set(arr));


// 42) Удаление дублей из массива / Удаление дублей из массива через Set
//
// С помощью коллекций Set легко можно удалять дубли из массивов. Для этого массив нужно преобразовать в коллекцию Set.
// Так как эта коллекция не может содержать дубли элементов, то при преобразовании они исчезнут.
// Если затем преобразовать коллекцию обратно в массив, то мы получим массив без дублей.
//
// Давайте посмотрим на примере. Пусть у нас есть следующий массив с дублями:
// let arr = [1, 2, 3, 1, 3, 4];
//
// Создадим на его основе коллекцию Set:
// let set = new Set(arr);
//
// А теперь преобразуем нашу коллекцию обратно в массив:
// let arr = [1, 2, 3, 1, 3, 4];
// let res = [...new Set(arr)];
//
// console.log(res); // выведет [1, 2, 3, 4]


// 1 Напишите функцию, которая параметром будет принимать массив и возвращать этот массив без дублей.
//
// function removeDuplicates(arr) {
//     return [...new Set(arr)];
// }
//
// console.log(removeDuplicates([1, 2, 2, 5, 5, 5, 0]));
// console.log(removeDuplicates([11, 11, 11]));


// 43) Получение без дублей / Получение DOM элементов без дублей
//
// Пусть у нас есть абзацы и кнопка:
// <p>aaa</p>
// <p>bbb</p>
// <p>ccc</p>
// <p>ddd</p>
// <p>eee</p>
//
// <button>click me</button>
//
// Пусть пользователь кликает на эти абзацы в произвольном порядке. Давайте сделаем так,
// чтобы по нажатию на кнопку в конец каждого абзаца, на который был совершен клик,
// был добавлен восклицательный знак. Решим задачу через Set.
//
// Приступим. Для начала получим наши элементы в переменные:
// let button = document.querySelector('button');
// let elems  = document.querySelectorAll('p');
//
// Создадим новую коллекцию Set:
// let set = new Set;
//
// Переберем абзацы циклом и повесим на них обработчик клика:
// for (let elem of elems) {
// 	elem.addEventListener('click', function() {
//
// 	});
// }
//
// Давайте теперь по клику на абзац будем добавлять этот абзац в коллекцию:
// for (let elem of elems) {
// 	elem.addEventListener('click', function() {
// 		set.add(this);
//
// 	});
// }
//
// Из-за того, что мы используем коллекцию Set повторный клик на абзац не будет приводить к добавлению дубля абзаца.
//
// Давайте теперь по клику на кнопку переберем содержимое нашей коллекции и каждому абзацу в конец
// добавим восклицательный знак:
// button.addEventListener('click', function() {
// 	for (let elem of set) {
// 		elem.textContent = elem.textContent + '!';
// 	}
// });


// 1 Даны абзацы и кнопка. Пользователь кликает на эти абзацы в произвольном порядке. Сделайте так,
// чтобы по нажатию на кнопку в конец каждого абзаца, на который был совершен клик, был добавлен восклицательный знак.

let btn = document.querySelector('button');
let paragraphs = document.querySelectorAll('p');

let set = new Set;

for (const paragraph of paragraphs) {
    paragraph.addEventListener('click', function () {
        set.add(this);
        // console.log(set);
    });
}

btn.addEventListener('click', function () {
    for (const setElement of set) {
        setElement.textContent += '!';
    }
});