// 02_Game_Of_Cities
// Игра в города


// 15 Постановка задачи / Игра в города на JavaScript

// Существует игра в города. Ее правила: в города играют двое и более человек, в которой каждый участник в свою
// очередь называет реально существующий город любой страны, название которого начинается на ту букву,
// которой оканчивается название предыдущего участника.
//
// Давайте реализуем эту игру. Пусть играют два человека за одним компьютером. Ходят по очереди.
// Города вводятся в один инпут и отправляются по нажатию клавиши Enter.
// Браузер должен запоминать города, которые уже были, и не принимать такие города.
//
// Давайте сразу сделаем простую верстку нашего проекта.
// У нас будет инпут для ввода городов и див для вывода сообщений со стороны браузера:
//
// <input id="field">
// <div id="message"></div>
// Можем сразу получить эти элементы в переменные:
//
// let field   = document.querySelector('#field');
// let message = document.querySelector('#message');
// Поговорим теперь об этапах реализации этого проекта. В предыдущих уроках я сам разбивал проект на этапы,
// облегчая вам работу. В данном проекте я бы хотел, чтобы вы для начала сами попробовали сделать это.


// 1 Распишите текстом подзадачи, которые нужно решить для реализации данного проекта.

// 1) Вешаем слушатель события на инпут, собитие keypress или keydown, далее обратотчик события.
// В качестве аргумента объект событие event.
// 2) В обработичике события мы проверяем event через key или code на Enter.
// 3) Если условие не верно можно вывести alert.
// 4) Если условие верно, то создаем пустой массив с городами.
// 5) Далее делаем проверку, как вариант через filter на наличие в массиве введенного города.
// 6) Ок пушим в него введенный город.
// 7) Иначе в message выводим, что город уже есть.
// 8) Очищаем инпут.
// 9) Со 2го введения, возможно тут понадобится флаг. Нужна еще проверка при добавлении города,
// что 0 символ равен последнему символу последнего элемента массива городов.

// Не совсем понятно как сверять введенный город, то что такой город вообще существует.
// Как вариант это массив с существующими городами, но это капец огромный масиив)))


// 16 Реализация задачи / Реализация игры в города на JavaScript

// Давайте обсудим, как мы будем реализовывать наш проект.
//
// Я бы начал с того, что сделал бы массив, в который будут записываться города, которые вводят наши игроки:
//
// let cities = [];
// Пусть у нас начало игры и ходит первый игрок. Он вбивает город и нажимает Enter.
// Очевидно, что этот город мы сразу можем внести в наш массив с городами.
//
// Теперь будет ходить второй игрок. Так как наш массив уже не пуст,
// то этот второй ход будет описываться тем же алгоритмом, что и все последующие ходы.
//
// Что это за алгоритм? Во-первых, нужно проверить то, что первая буква введенного города совпадает с последней буквой
// предыдущего города. Во-вторых, нужно проверить то, что такого города еще не было в этой игре.
//
// Если оба этих условия выполняются, то введенный город записывается в наш массив и ход переходит к следующему игроку.
// Если же какое-то условие не выполняется, то нужно вывести сообщение об этом.


// 1 Реализуйте игру в соответствии с описанным алгоритмом.

// let field = document.querySelector('#field');
// let message = document.querySelector('#message');
//
// let cities = [];
// let notCorrectLetters = ['ь', 'ъ', 'ы', 'ё'];
//
// field.addEventListener('keypress', function (event) {
//     if (event.code === 'Enter') {
//         if (cities.length) {
//             let firstLetter = this.value.slice(0, 1).toLowerCase();
//             let lastLetter = cities.slice(-1).join('').slice(-1); // получаю последний элемент из массива, разбиваю элемент на строки, получаю последний символ строки
//
//             let notCorrectLetter = notCorrectLetters.some(el => el === lastLetter);
//             notCorrectLetter && (lastLetter = cities.slice(-1).join('').slice(-2, -1)); // если последняя буква не корректна, то присваиваю предпоследнюю
//
//             let res = cities.some(el => el === this.value);
//             (firstLetter === lastLetter) && !res ? cities.push(this.value.toLowerCase()) : message.textContent = 'Ошибка';
//
//             this.value = '';
//         } else {
//             cities.push(this.value.toLowerCase());
//             this.value = '';
//         }
//         console.log(cities);
//     }
// });
//
// field.addEventListener('input', () => message.textContent = '');


// 17 Против робота / Игра в города против робота на JavaScript

// Давайте теперь модифицируем нашу игру так, чтобы игра велась против робота, то есть программы, а не другого человека.
//
// Пусть у нашего робота будет массив всех разрешенных городов:
//
// let allCities = [];
// Когда человек будет вбивать в инпут свой город, робот должен будет проверять наличие этого города в своем массиве.
//
// В таком случае в каждом ходе игрока возможны следующие проблемные ситуации:
// игрок ввел город, который уже был;
// игрок ввел город не на ту букву, на которую заканчивается предыдущий город;
// игрок ввел город, которого нет в списке робота.
//
// В свой ход робот должен брать один из разрешенных городов так, чтобы этого города еще не было в игре.
// При этом выбранный город должен начинаться с буквы, на которую закончился предыдущий город.


// 2 Реализуйте игру человека против робота.


let field = document.querySelector('#field');
let message = document.querySelector('#message');

let allCities = [
    'москва', 'санкт-петербург', 'новосибирск', 'екатеринбург', 'казань', 'нижний новгород', 'красноярск', 'челябинск',
    'самара', 'уфа', 'ростов-на-дону', 'краснодар', 'омск', 'воронеж', 'пермь', 'волгоград', 'саратов', 'тюмень',
    'тольятти', 'барнаул', 'махачкала', 'ижевск', 'хабаровск', 'ульяновск', 'иркутск', 'владивосток', 'ярославль',
    'севастополь', 'томск', 'ставрополь', 'кемерово', 'набережные челны', 'оренбург', 'новокузнецк', 'балашиха',
    'рязань', 'чебоксары', 'пенза', 'липецк', 'калининград', 'киров', 'астрахань', 'тула', 'сочи', 'улан-удэ', 'курск',
    'тверь', 'магнитогорск', 'сургут', 'брянск', 'якутск', 'иваново', 'владимир', 'симферополь', 'нижний тагил',
    'калуга', 'белгород', 'чита', 'грозный', 'волжский', 'смоленск', 'подольск', 'саранск', 'вологда', 'курган',
    'череповец', 'архангельск', 'орёл', 'владикавказ', 'нижневартовск', 'йошкар-ола', 'стерлитамак', 'мурманск',
    'мытищи', 'кострома', 'новороссийск', 'тамбов', 'химки', 'нальчик', 'таганрог', 'нижнекамск', 'благовещенск',
    'комсомольск-на-амуре', 'петрозаводск', 'люберцы', 'королёв', 'энгельс', 'великий новгород', 'шахты', 'братск',
    'сыктывкар', 'ангарск', 'старый оскол', 'дзержинск', 'псков', 'красногорск', 'орск', 'одинцово', 'абакан', 'армавир',
    'балаково', 'бийск', 'южно-сахалинск', 'уссурийск', 'прокопьевск', 'норильск', 'рыбинск', 'волгодонск',
    'альметьевск', 'сызрань', 'петропавловск-камчатский', 'каменск-уральский', 'новочеркасск', 'златоуст', 'хасавюрт',
    'северодвинск', 'домодедово', 'керчь', 'миасс', 'салават', 'копейск', 'пятигорск', 'электросталь', 'майкоп',
    'находка', 'березники', 'щёлково', 'серпухов', 'нефтекамск', 'коломна', 'ковров', 'обнинск', 'кызыл', 'кисловодск',
    'петрово-камчатский', 'батайск', 'нефтеюганск', 'рубцовск', 'назрань', 'ессентуки', 'новочебоксарск', 'долгопрудный',
    'новомосковск', 'октябрьский', 'невинномысск', 'раменское', 'реутов', 'первоуральск', 'михайловск', 'черкесск',
    'пушкино', 'жуковский', 'ханты-мансийск', 'димитровград', 'артем', 'новый уренгой', 'евпатория', 'муром', 'северск',
    'орехово-зуево', 'камышин', 'мурино', 'арзамас', 'видное', 'бердск', 'элиста', 'ногинск', 'новошахтинск', 'ноябрьск'
];

let cities = [];
let isRobot = false;
let notCorrectLetters = ['ь', 'ъ', 'ы', 'ё', 'ц'];

field.addEventListener('keypress', function (event) {
    if (event.code === 'Enter') {
        let presenceOfACity = allCities.some(el => el === this.value.toLowerCase());

        if (!presenceOfACity) {
            message.textContent = 'Вы ввели город, которого нет в списке робота';
        } else {
            if (cities.length) {
                playingHuman();
            } else {
                addCity(this.value);
                this.value = '';
                isRobot = true;
                playingRobot();
            }
        }
    }
});

function playingHuman() {
    let firstLetter = field.value.slice(0, 1).toLowerCase();
    let lastLetter = getLastLetter();
    let notCorrectLetter = getNotCorrectLetter(lastLetter);
    notCorrectLetter && (lastLetter = checkNotCorrectLetter());

    let cityRepeated = cities.some(el => el === field.value.toLowerCase());

    if (cityRepeated) {
        message.textContent = 'Вы ввели город, который уже был';
    } else if (firstLetter !== lastLetter) {
        message.textContent = 'Вы ввели город не на ту букву, на которую заканчивается предыдущий город';
    } else {
        addCity(field.value);
        field.value = '';
        isRobot = true;
        playingRobot();
    }
}

function playingRobot() {
    if (!isRobot) {
        return;
    }
    let lastLetter = getLastLetter();
    let notCorrectLetter = getNotCorrectLetter(lastLetter);
    notCorrectLetter && (lastLetter = checkNotCorrectLetter());

    let randomCity = getRandomInt(1, allCities.length - 1); // -1 обязательно иначе может быть ошибка

    let firstLetter = allCities[randomCity].slice(0, 1); // 1й вариант
    // let firstLetter = allCities[randomCity][0]; // 2й вариант

    let cityRepeated = cities.some(el => el === allCities[randomCity].toLowerCase());

    if (firstLetter === lastLetter && !cityRepeated) {
        let city = allCities[randomCity].slice(0, 1).toUpperCase() + allCities[randomCity].slice(1);
        message.textContent = `Робот ввел город: ${city}`;
        field.value = city;
        addCity(city);
    } else {
        playingRobot();
    }

    isRobot = false;
}

function getLastLetter() {
    return cities.slice(-1).join('').slice(-1); // получаю последний элемент из массива, разбиваю элемент на строки, получаю последний символ строки
}

function getNotCorrectLetter(lastLetter) {
    return notCorrectLetters.some(el => el === lastLetter);
}

function checkNotCorrectLetter() {
    return cities.slice(-1).join('').slice(-2, -1); // если последняя буква не корректна, то присваиваю предпоследнюю
}

function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

function addCity(city) {
    cities.push(city.toLowerCase());
    console.log(cities);
}

field.addEventListener('input', () => message.textContent = '');
