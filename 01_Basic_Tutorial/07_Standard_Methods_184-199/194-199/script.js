// 07_Standard_Methods_184-199

// 194 Граничные элементы в JavaScript

// Теория

// shift
// Метод shift удаляет первый элемент из массива. При этом исходный массив изменяется, а результатом метода возвращается
// удаленный элемент.
// строка.shift([разделитель], [максимальное количество элементов]);

// pop
// Метод pop удаляет последний элемент из массива. При этом исходный массив изменяется, а результатом метода
// возвращается удаленный элемент.
// массив.pop();

// push
// Метод push добавляет неограниченное количество элементов в конец массива.
// При этом исходный массив изменяется, а результатом возвращается новая длина массива.
// массив.push(элемент, элемент, элемент...);

// unshift
// Метод unshift добавляет неограниченное количество новых элементов в начало массива.
// При этом исходный массив изменяется, а результатом возвращается новая длина массива.
// массив.unshift(элемент, элемент, элемент...);

// 1 Выведите на экран первый элемент этого массива.
// let arr = [1, 2, 3];
// let res = arr.shift();
// console.log(res);

// 2 Выведите на экран последний элемент этого массива.
// let arr = [1, 2, 3];
// let res = arr.pop();
// console.log(res);

// 3 Добавьте ему в конец элементы 4, 5, 6.
// let arr = [1, 2, 3];
// let res = arr.push(4, 5, 6);
// console.log(arr);

// 4 Добавьте ему в начало элементы 4, 5, 6.
// let arr = [1, 2, 3];
// let res = arr.unshift(4, 5, 6);
// console.log(arr);


// 195 Части массивов в JavaScript

// Теория

// slice в соседнем файле 184-193 речь шла о строках, тут массив, но по сути разницы нет
//
// Метод slice вырезает и возвращает указанную часть массива. Сам массив при этом не изменяется.
//
// Первым параметром указывается номер элемента массива, с которого начинается вырезание, а вторым параметром - номер элемента,
// на котором закончится вырезание (при этом элемент с этим номером не включится в вырезанную часть). Второй параметр
// не является обязательным. Если его не указать - подмассив возьмется с указанного в первом параметре элемента до конца массива.
//
// Он также может принимать отрицательные значения. В этом случае отсчет элемента, на котором закончится обрезание,
// начинается с конца массива. Последний элемент при этом будет иметь номер -1.
//
// массив.slice(откуда отрезать, [докуда отрезать]);

// 1 Сделайте из этого массива следующий: [1, 2, 3]
// let arr = [1, 2, 3, 4, 5];
// let res = arr.slice(0, 3);
// console.log(res);

// Используя этот массив, запишите в новую переменную следующий массив: [4, 5]
// let arr = [1, 2, 3, 4, 5];
// let res = arr.slice(-2);
// console.log(res);


// 196 Вырезание массивов в JavaScript

// Теория

// splice
// Метод splice удаляет или добавляет элементы в массив. Можно только удалять элементы, только добавлять или делать и то
// и другое одновременно. Метод очень универсальный и сложный для понимания. Метод изменяет сам массив и возвращает
// при этом массив удаленных элементов.
//
// Первым параметром метод принимает номер элемента массива, который нужно удалить. Вторым параметром - сколько элементов
// массива следует удалить. Если его поставить в 0 - то элементы удалены не будут (только добавлены новые).
// Дальше через запятую идут элементы, которые нужно добавить в массив (являются необязательными параметрами).
// Эти элементы добавятся вместо удаленных элементов массива.
//
// Если удаления не было (когда второй параметр 0) - элементы вставятся в массив начиная с той позиции, которая указана
// первым параметром метода. Первый параметр может иметь отрицательное значение.
// В этом случае отсчет позиции начнется не с начала массива, а с конца. Последний элемент при этом будет иметь номер -1.
//
// массив.splice(откуда удаляем, сколько удаляем, [вставить], [вставить]...);

// 1 С помощью метода splice преобразуйте массив в следующий: [1, 4, 5]
// let arr = [1, 2, 3, 4, 5];
// arr.splice(1, 2);
// console.log(arr);

// 2 С помощью метода splice сделайте из него массив: [1, 2, 3, 'a', 'b', 'c', 4, 5]
// let arr = [1, 2, 3, 4, 5];
// arr.splice(3, 0, 'a', 'b', 'c');
// console.log(arr);

// 3 С помощью метода splice сделайте из него массив: [1, 'a', 'b', 2, 3, 4, 'c', 5, 'e']
// let arr = [1, 2, 3, 4, 5];
// arr.splice(1, 0, 'a', 'b');
// arr.splice(6, 0, 'c');
// arr.splice(8, 0, 'e');
// console.log(arr);


// 197 Поиск по массивам в JavaScript

// Теория

// find
// Метод find помогает найти первый элемент в массиве согласно переданному в параметре коллбэку.
// Если элемента нет, то возвращается undefined.
//
// массив.find(функция);

// includes в соседнем файле 184-193 речь шла о строках, тут массив
// Метод includes проверяет наличие элемента в массиве. Параметром принимает значение для поиска.
// Если такой элемент есть в массиве, то метод возвращает true, а если нет, то false.
// массив.includes(элемент);

// indexOf в соседнем файле 184-193 речь шла о строках, тут массив
// Метод indexOf осуществляет поиск элемента в массиве. В первом параметре указываем номер позиции искомого символа.
// Метод возвращает номер первого найденного элемента, либо -1, если такого элемента нет.
// Второй необязательный параметр метода задает позицию, с которой следует начинать поиск.
// массив.indexOf(элемент, [откуда начинать]);
//
// Частая ошибка
// Иногда метод используют для проверки наличия элемента в массиве. В этом случае легко допустить ошибку,
// если выполнить проверку следующим образом:
//     if (arr.indexOf(3)) {
//         console.log(true);
//     } else {
//         console.log(false);
//     }
// Такая проверка будет работать для всех позиций, кроме нулевой - ведь она трактуется как false.
//
//     Правильно проверять наличие элемента следующим образом:
//
//     if (arr.indexOf(3) !== -1) {
//         console.log(true);
//     } else {
//         console.log(false);
//     }

// lastIndexOf в соседнем файле 184-193 речь шла о строках, тут массив
// Метод lastIndexOf осуществляет поиск элемента в массиве. Возвращает номер последнего найденного элемента, либо -1,
// если такого элемента нет. Первым параметром мы указываем номер элемента, вторым (необязательным) - позицию,
// с которой следует начинать поиск. Поиск ведется с конца массива в начало.
//
// массив.lastIndexOf(элемент, [откуда начинать]);

// 1 Проверьте, есть ли в этом массиве число 3.
// let arr = [1, 2, 3, 4, 5];

// let res = arr.includes(3);
//
// if (arr.includes(3)) {
//     console.log(true);
// } else {
//     console.log(false);
// }


// let res = arr.indexOf(3);
//
// if (arr.indexOf(3) !== -1) {
//     console.log(true);
// } else {
//     console.log(false);
// }

// let res = arr.lastIndexOf(3);
//
// if (arr.lastIndexOf(3)) {
//     console.log(true);
// } else {
//     console.log(false);
// }


// let res = arr.find(function (el) {
//     if (el === 3) {
//         console.log('true');
//     } else {
//         console.log('false');
//     }
//     return el === 3;
// });

// console.log(res);


// 198 Массив ключей объекта в JavaScript

// Теория

// Object.keys
// Метод Object.keys возвращает массив из свойств объекта в том же порядке, как и при перечислении через цикл.
//
// let keys = Object.keys(объект);

// 1 Получите массив его ключей.
// let obj = {a: 1, b: 2, c: 3};
// let arr = Object.keys(obj);
//
// console.log(arr);


// 199 Поиск ошибок в коде со стандартными методами JavaScript

// 1 Код должен найти сумму цифр числа:
// let num = 12345;
// let arr = num.toString().split('');
//
// let sum = 0;
// for (let digit of arr) {
//     sum += +digit;
// }
//
// console.log(sum);

// 2 Код должен найти сумму цифр числа:
// let num = 12345;
// let arr = String(num).split('');
//
// let sum = 0;
// for (let digit of arr) {
//     sum += Number(digit);
// }
//
// console.log(sum);

// 3 Код должен найти сумму цифр числа:
// let num = 12345;
// let arr = String(num).split('');
//
// let sum = 0;
// for (let digit of arr) {
// 	sum += Number(digit);
// }
//
// console.log(sum); // почему-то выводит 5, а не 15

// 4 Код должен найти сумму цифр числа:
// let num = 12345;
// let arr = String(num).split('');
//
// let sum = 0;
// for (let digit of arr) {
// 	sum += Number(digit);
// }
//
// console.log(sum);

// 5 Код должен найти произведение цифр числа:
// let num = 12345;
// let arr = String(num).split('');
//
// let prod = 1;
// for (let digit of arr) {
// 	prod *= digit;
// }
//
// console.log(prod);