// 15_Iterating_Methods_279-285
// Перебирающие методы


// 279 Метод map / Метод map для перебора массива в JavaScript

// Теория

// map / Метод map
// Метод map позволяет применить заданную функцию для каждого элемента массива. При этом метод не изменяет исходный массив, а возвращает измененный.
//
// Метод в параметре получает функцию, которая выполнится для каждого элемента массива. То, что вернет эта функция через
// return для элемента массива, станет новым значением этого элемента (см. примеры).
//
// В функцию можно передавать 3 параметра. Если эти параметры есть (они не обязательны), то в первый автоматически
// попадет элемент массива, во второй попадет его номер в массиве (индекс), а в третий - сам массив.
//
// let новый массив = массив.map(function(элемент, индекс, массив) {
// 	код
// 	return измененный элемент;
// });


// 1 Дан массив с числами. Используя метод map извлеките из каждого элемента массива квадратный корень и запишите результат в новый массив.

// let arr = [0, 1, 16, 9, 4];
//
// let newArr = arr.map(function (el) {
//     return Math.sqrt(el);
// });
//
// console.log(newArr);


// 2 Дан массив со строками. Используя метод map в конец значению каждого элемента массива добавьте символ '!'.

// let arrStr = ['a', 'n', 'e', 'c', 'h', 'k', 'a'];
//
// let newArrStr = arrStr.map(function (el) {
//     return el + '!';
// });
//
// console.log(newArrStr);


// 3 Дан массив со строками. Используя метод map переверните символы каждой строки в обратном порядке.
//
// let arrStr = ['anechka', 'melissa'];
//
// let newArrStr = arrStr.map(el => el.split('').reverse().join(''));
//
// console.log(newArrStr);


// 4 Дан следующий массив:
//
// let arr = ['123', '456', '789'];
// // Используя метод map преобразуйте этот массив в следующий:
// //
// // let arr = [
// // 	[1, 2, 3],
// // 	[4, 5, 6],
// // 	[7, 8, 9]
// // ];
//
// let newArr = arr.map(function (el) {
//     return el.split('').map(Number)
// });
//
// console.log(newArr);


// Ключ элемента
// Функция-коллбэк может также принимать второй параметр - в него JavaScript разместит ключ элемента массива.
//
// Давайте посмотрим на примере. Пусть дан вот такой массив:
//
// let arr = ['a', 'b', 'c', 'd', 'e'];
// Давайте в конец каждого элемента запишем его порядковый номер в массиве:
//
// let arr = ['a', 'b', 'c', 'd', 'e'];
//
// let result = arr.map(function(elem, index) {
// 	return elem + index;
// });
//
// console.log(result); // выведет ['a0', 'b1', 'c2', 'd3', 'e4']

// 5 Дан массив с числами. Используя метод map запишите в каждый элемент массива значение этого элемента, умноженное на его порядковый номер в массиве.

// let arr = [1, 5, 2, 4, 3, 6];
//
// let newArr = arr.map((el, index) => el * index);
//
// console.log(newArr);


// Перебор многомерных массивов
// Метод map можно использовать и для перебора многомерных массивов. Пусть, к примеру, дан вот такой массив:
//
// let arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
// Давайте переберем этот массив через map и выведем его элементы в консоль:
//
// let arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
//
// let result = arr.map(function(elem) {
// 	console.log(elem);
// });
// В результате console.log выведет [1, 2, 3], потом [4, 5, 6], потом [7, 8, 9].
//
// Как вы видите, в переменную elem попадают подмассивы. Давайте теперь применим метод map к каждому подмассиву и возведем каждый его элемент в квадрат:
//
// let arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
//
// let result = arr.map(function(elem) {
// 	return elem.map(function(num) {
// 		return num * num;
// 	});
// });
//
// console.log(result);


// 280 Метод forEach / Метод forEach для перебора массива в JavaScript

// Теория

// forEach / Метод forEach
// Метод forEach позволяет последовательно перебрать все элементы массива. Метод в параметре получает функцию, которая
// выполнится для каждого элемента массива.
//
// В эту функцию можно передавать три параметра. Если эти параметры есть (они не обязательны), то в первый автоматически
// попадет элемент массива, во второй попадет его номер в массиве (индекс), а в третий - сам массив.
//
// массив.forEach(function(элемент, индекс, массив) {
// 	код, который выполнится для всех элементов
// });


// 1 Дан массив с числами. Используя метод forEach найдите сумму квадратов элементов этого массива.
//
// let arr = [1, 2, 3, 4];
// let sum = 0;
//
// arr.forEach(el => sum += el * el);
//
// console.log(sum);


// 281 Метод filter / Метод filter для фильтрации массива в JavaScript
//
// Теория

// filter / Метод filter
// Метод filter позволяется отфильтровать элементы массива, оставив только подходящие под определенное условие элементы.
// Метод в параметре получает функцию, которая выполнится для каждого элемента массива.
// Своим результатом метод возвращает новый массив, в который войдут только те элементы, для которых переданная функции вернет true.
//
// В функцию можно передавать три параметра. Если эти параметры есть (они не обязательны), то в первый автоматически
// попадет элемент массива, во второй попадет его номер в массиве (индекс), а в третий - сам массив.
//
// let новый массив = массив.filter(function(элемент, индекс, массив) {
// 	код
// 	return true или false
// });


// 1 Дан массив с числами. Оставьте в нем только положительные числа.
//
// let arr = [-1, 5, -2, 7, 0, 9, -3];
//
// let res = arr.filter(el => el >= 0);
//
// console.log(res);


// 2 Дан массив с числами. Оставьте в нем только отрицательные числа.
//
// let arr = [-1, 5, -2, 7, 0, 9, -3];
//
// let res = arr.filter(el => el < 0);
//
// console.log(res);


// 3 Дан массив с числами. Оставьте в нем только числа, которые больше нуля, но меньше 10.
//
// let arr = [-1, 5, -2, 7, 0, 9, -3, 10, 20];
//
// let res = arr.filter(el => el > 0 && el < 10);
//
// console.log(res);


// 4 Дан массив со строками. Оставьте в нем только те строки, длина которых больше 5-ти символов.
//
// let arr = ['Ivan', 'Anna', 'Melissa'];
//
// let res = arr.filter(el => el.length > 5);
//
// console.log(res);


// 5 Дан массив с числами. Оставьте в нем только те числа, произведение которых на их порядковый номер меньше 30.
//
// let arr = [-1, 5, -2, 7, 0, 9, -3, 10, 20, 0];
//
// let res = arr.filter((el, index) => el * index < 30);
//
// console.log(res);


// 6 Дан массив, в нем могут быть обычные элементы и подмассивы, например [1, 2, [3, 4], 5, [6, 7]]. Оставьте в нем только обычные элементы.
//
// let arr = [1, 2, [3, 4], 5, [6, 7], 8, 9, [10]];
//
// let res = arr.filter(el => typeof el !== 'object');
//
// console.log(res);


// 282 Метод every / Метод every для проверки массива в JavaScript
//
// Теория

// every / Метод every
// Метод every проверяет элементы массива в соответствии с переданной функцией. Метод возвращает true,
// если для всех элементов массива переданная функция вернет true, в противном случае метод возвращает false.
//
// В функцию можно передавать три параметра. Если эти параметры есть (они не обязательны), то в первый автоматически
// попадет элемент массива, во второй попадет его номер в массиве (индекс), а в третий - сам массив.
//
// массив.every(function(элемент, индекс, массив) {
// 	return true или false;
// });


// 1 Дан массив с числами. Проверьте то, что все элементы в массиве больше нуля.
//
// let arr = [1, 2, 3, 4, 5, 0];
//
// let check = arr.every(el => el > 0);
//
// console.log(check);


// 2 Дан массив с числами. Проверьте то, что для всех элементов произведение их значений на их порядковый номер меньше 30.
//
// let arr = [1, 2, 3, 4, 5, 0];
//
// let check = arr.every((el, index) => el * index < 30);
//
// console.log(check);


// 283 Метод some / Метод some для проверки массива в JavaScript
//
// Следующий метод some проверяет элементы массива и возвращает true, если хотя бы для одного элемента коллбэк вернул true,
// в противном случае метод возвращает false.
//
//     Проверим, к примеру, что в массиве есть хотя бы одно четное число:
//
//     let arr = [2, 4, 6, 8];
//
// let result = arr.some(function(elem) {
//     return elem % 2 == 0;
// });
//
// console.log(result);
// Упростим:
//
//     let arr = [2, 4, 6, 8];
//
// let result = arr.some(elem => elem % 2 == 0);
// console.log(result);


// 1 Дан массив с числами. Проверьте то, что в массиве есть хотя бы одно число больше нуля.
//
// let arr = [0, -1, 5, 2];
//
// let result = arr.some(el => el > 0);
//
// console.log(result);


// 2 Дан массив с числами. Проверьте то, что хотя бы для одного элемента произведение его значения на порядковый номер больше 30.
//
// let arr = [0, 1, 5, 2];
//
// let result = arr.some((el, index) => el * index < 30);
//
// console.log(result);


// 284 Метод find / Поиск по массиву через коллбэк на JavaScript
//
// Теория

// find / Метод find
// Метод find помогает найти первый элемент в массиве согласно переданному в параметре коллбэку. Если элемента нет, то возвращается undefined.
//
// Синтаксис
// массив.find(функция);
//
//
// Пример 1
// Давайте найдем элемент массива, соответствующий условиям, прописанным в функции:
//
// let arr = [1, 2, 3, 4];
//
// let res = arr.find(function(currentValue) {
// 	return currentValue > 0;
// });
//
// console.log(res);
// Результат выполнения кода:
//
// 1
//
//
// Пример
// Давайте найдем элемент массива, длина которого равна 2:
//
// let arr = ['abc', 'defg', 'kl', 'mn'];
//
// let res = arr.find(function(elem) {
// 	return elem.length == 2;
// });
//
// console.log(res);
// В результате выполнения кода мы увидим, что метод нашел первый элемент, подходящий к условиям функции:
//
// 'kl'


// findIndex / Метод findIndex
// Метод findIndex позволяет найти индекс первого элемента согласно согласно переданному в параметре коллбэку. Если элемент не найден, то возвращается -1.
//
// Синтаксис
// массив.findIndex(функция);
//
//
// Пример
// Давайте найдем индекс первого четного элемента массива:
//
// let arr = [1, 2, 3, 4, 5];
//
// let res = arr.findIndex(function (elem){
// 	return elem % 2 == 0;
// });
//
// console.log(res);
// Результат выполнения кода:
//
// 1
//
//
// Пример
// А теперь давайте зададим такие условия в функции, которым не будет соответствовать ни один элемент в массиве:
//
// let arr = [1, 2, 3, 4, 5];
//
// let res = arr.findIndex(function (elem){
// 	return elem < 0;
// });
//
// console.log(res);
// Результат выполнения кода:
//
// -1


// findLast / Метод findLast
// Метод findLast ищет первый элемент с конца массива согласно переданному в параметре коллбэку. Если элемента нет, то в результат возвращается undefined.
//
// Синтаксис
// массив.findLast(функция);
//
//
// Пример
// Давайте найдем элемент массива, соответствующий условиям, прописанным в функции:
//
// let arr = [1, 2, 3, 4, 5];
//
// let res = arr.findLast(function(elem) {
// 	return elem > 0;
// });
//
// console.log(res);
// Результат выполнения кода:
//
// 5


// findLastIndex / Метод findLastIndex
// Метод findLastIndex помогает найти индекс первого элемента с конца массива, соответствующий условию согласно
// переданному в параметре коллбэку. Если элемента нет, то возвращается undefined.
//
// Синтаксис
// массив.findLastIndex(функция);
//
//
// Пример
// Давайте найдем индекс положительного числа в массиве:
//
// let arr = [-12, -13, 14, 15];
//
// let res = arr.findLastIndex(function(elem) {
// 	return elem > 0;
// });
//
// console.log(res);
// Результат выполнения кода:
//
// 3
//
//
// Пример
// А теперь давайте найдем индекс элемента, которого нет в массиве:
//
// let arr = ['a', 'b', 'c', 'd'];
//
// let res = arr.findLastIndex(function(elem) {
// 	return elem === 'f';
// });
//
// console.log(res);
// Результат выполнения кода:
//
// -1


// 285 Метод reduce / Свертка массива на JavaScript
//
// Теория

// reduce / Метод reduce
// Метод reduce сворачивает массив к одному значению (редуцирует). К примеру, с помощью этого метода можно легко найти
// сумму элементов массива (то есть массив сведется к одному значению - к сумме элементов).
//
// Первым параметром метод reduce получает функцию, которая последовательно выполнится для каждого элемента массива,
// начиная с первого. В эту функцию можно передавать 4 параметра. Если эти параметры есть (они не обязательны),
// то в первый автоматически попадет промежуточный результат, во второй попадет элемент массива,
// в третий - его номер в массиве (индекс), а в четвертый - сам массив.
//
// Промежуточный результат - это переменная, в которой будет накапливаться то значение, которое вернет метод reduce,
// когда переберет все элементы массива. К примеру, туда последовательно можно накапливать сумму элементов массива:
// сначала положить первый элемент, при следующем проходе цикла уже сумму первого элемента и второго,
// при следующем проходе - сумму первого, второго и третьего. И так, пока массив не закончится.
// Функция, которую принимает reduce, должна возвращать новое значение промежуточного результата.
//
// Вторым параметром метода reduce указывается начальное значение промежуточного результата. Если его не указать,
// то оно будет равно первому элементу массива, а обработка элементов начнется со второго элемента.
//
// Синтаксис
// массив.reduce(function(промежуточный результат, элемент, индекс, массив) {
// 	return новый промежуточный результат;
// }, начальное значение);
//
//
// Пример
// Найдем сумму элементов массива:
//
// let arr = [1, 2, 3, 4, 5, 6];
//
// let res = arr.reduce(function(sum, elem) {
// 	return sum + elem;
// }, 0);
//
// console.log(res);
// Результат выполнения кода:
//
// 21
//
//
// Пример
// Давайте найдем сумму всех положительных чисел массива:
//
// let arr = [1, -2, -3, 4, 5, -6];
//
// let res = arr.reduce(function(sum, elem) {
// 	if (elem >= 0) {
// 		return sum + elem;
// 	} else {
// 		return sum;
// 	}
// });
//
// console.log(res);
// Результат выполнения кода:
//
// 10


// reduceRight / Метод reduceRight
// Метод reduceRight работает точно так же как и reduce - смотрите его для полного понимания. Единственное отличие: reduce перебирает элементы слева направо, а reduceRight - справа налево.
//
// Синтаксис
// массив.reduceRight(function(промежуточный результат, элемент, индекс, массив) {
// 	return новый промежуточный результат;
// }, начальное значение);
//
//
// Пример
// Давайте найдем сумму элементов массива:
//
// let arr = [1, 2, 3, 4, 5, 6];
//
// let res = arr.reduceRight(function(sum, elem) {
// 	return sum + elem;
// }, 0);
//
// console.log(res);
// Результат выполнения кода:
//
// 21
//
//
// Пример
// Давайте сольем двумерный массив в одномерный:
//
// let arr = [['a', 'b'], ['c'], ['d', 'e']];
//
// let res = arr.reduceRight(function(elem1, elem2) {
// 	return elem1.concat(elem2);
// }, []);
//
// console.log(res);
// Результат выполнения кода:
//
// ['d', 'e', 'c', 'a', 'b']

