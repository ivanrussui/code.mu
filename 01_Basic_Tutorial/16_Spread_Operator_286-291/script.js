// 16_Spread_Operator_286-291
// Оператор spread


// 286 Введение / Оператор spread в JavaScript
//
// В ES6 появился специальный оператор ..., называющийся spread.
//
// Когда оператор spread стоит перед массивом, он разделяет этот массив на отдельные значения,
// превращая массив в набор параметров, необходимых для вызова функции.
//
// Наверняка звучит непонятно, поэтому давайте посмотрим на простом примере. Пусть у нас есть функция,
// принимающая 3 параметра и возвращающая их сумму:
//
// function func(num1, num2, num3) {
// 	return num1 + num2 + num3;
// }
// Пусть у нас также есть массив из трех элементов:
//
// let arr = [1, 2, 3];
// Очевидно, что мы не можем просто взять и передать этот массив параметром функции, вот так:
//
// let arr = [1, 2, 3];
// func(arr);
// Ведь в этом случае весь массив попадет в первый параметр функции,
// а в этот параметр необходимо передавать число (да и в остальные параметры тоже).
//
// Конечно же, можно поступить следующим образом:
//
// let arr = [1, 2, 3];
// func(arr[0], arr[1], arr[2]);
// Но есть и более простой путь - использовать оператор spread:
//
// let arr = [1, 2, 3];
// func(...arr);
// Наличие переменной не является обязательным - можно применять spread прямо к массиву:
//
// func(...[1, 2, 3]);


// 1 Дан массив:
//
// let arr = [1, 2, 3, 4, 5];
// Дана также функция:
//
// function func(num1, num2, num3, num4, num5) {
// 	return num1 + num2 + num3 + num4 + num5;
// }
//
// Найдите с помощью приведенной функции сумму элементов массива.
//
// console.log(func(...arr));


// 287 Более сложные примеры / Использование spread в JavaScript
//
// Пусть у нас есть вот такая функция с 5-тью параметрами:
//
// function func(num1, num2, num3, num4, num5) {
// 	return num1 + num2 + num3 + num4 + num5;
// }
// Мы можем с помощью spread передать в эту функцию один массив:
//
// func(...[1, 2, 3, 4, 5]);
// Но это не обязательно!
//
// Можно передать два массива:
//
// func(...[1, 2], ...[3, 4, 5]);
// Можно передать часть параметров обычным способом, а часть - с помощью spread:
//
// func(1, 2, ...[3, 4, 5]);
// Или вот так:
//
// func(1, ...[2, 3, 4], 5);


// 288 Экстремальные значения массива / Экстремальные значения массива через spread в JavaScript
//
// Посмотрите на следующий код:
//
// let max = Math.max(1, 2, 3, 4, 5);
// Как вы видите, в этом коде находится максимальное из чисел.
// Но что делать, если наши числа представлены в виде массива? Например, вот так:
//
// let arr = [1, 2, 3, 4, 5];
// Мы, увы, не можем сделать следующее:
//
// let arr = [1, 2, 3, 4, 5];
// let max = Math.max(arr); // здесь нельзя передавать массив
// Конечно же, мы можем вручную проставить элементы массива в Math.max, вот так:
//
// let arr = [1, 2, 3, 4, 5];
// let max = Math.max(arr[0], arr[1], arr[2], arr[3], arr[4]);
// Однако, в этом случае теряется всякая универсальность: наш код будет находить максимальное значение лишь для массива из 5 элементов.
//
// А что, если нам понадобится больше или меньше элементов в массиве? Решение есть! Используем оператор spread:
//
// let arr = [1, 2, 3, 4, 5]
// let max = Math.max(...arr);
// Данный код, не смотря на его простоту, очень мощный. Ведь Math.max может принимать любое количество параметров,
// а значит с помощью оператора spread мы можем использовать массив произвольного размера!


// 1 Дан массив с числами. Используя Math.min и spread выведите на экран минимальное значение массива.
//
// let arr = [3, 9, -2, 1];
// let min = Math.min(...arr);
//
// console.log(min);


// 289 Слияние массивов / Оператор spread и слияние массивов
//
// Пусть у нас есть два массива:
//
// let arr1 = ['a', 'b', 'c'];
// let arr2 = [1, 2, 3];
// Давайте сделаем так, чтобы между первым и вторым элементами массива arr2 вставились элементы массива arr1.
//
// Говоря другими словами, мы хотим написать код, который из текущего массива arr2 сделает следующий массив:
//
// [1, 'a', 'b', 'c', 2, 3]
// Задача, в общем-то, решаема через метод splice. Однако, гораздо проще эта задача решается через spread:
//
// let arr1 = ['a', 'b', 'c'];
// let arr2 = [1, ...arr1, 2, 3];
//
// console.log(arr2); // выведет [1, 'a', 'b', 'c', 2, 3]


// 290 Разбиение строк / Оператор spread для строк в JavaScript
//
// Оператор spread, примененный к строке, разбивает эту строку посимвольно:
//
// ...'abcde'; // разобьет строку в символы через запятую: 'a','b','c','d','e'
// Результат такого разбиения можно передать в параметры функции:
//
// function func(s1, s2, s3, s4, s5) {
// 	return s1 + '-' + s2 + '-' + s3 + '-' + s4 + '-' + s5;
// }
//
// console.log( func(...'abcde') ); // выведет 'a-b-c-d-e'
// А можно преобразовать этот результат в массив:
//
// let arr = [...'abcde']; // получим массив ['a', 'b', 'c', 'd', 'e']


// 291 Разбиение чисел / Оператор spread и числа в JavaScript
//
// Оператор spread не применим к числам:
//
// let arr = [...12345]; // будет ошибка
// Для решения проблемы следует преобразовывать число в строку, вот так:
//
// let arr = [...String(12345)]; // получится массив ['1', '2', '3', '4', '5']
