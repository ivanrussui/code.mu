// 17_Rest_Operator_292-295
// Оператор rest


// 292 Оператор rest / Оператор rest в JavaScript
//
// Данный урок начнем с некоторого пояснения. Все предыдущие уроки данного раздела я не говорил вам всей правды про оператор ...
//
// На самом деле этот оператор в зависимости от места в коде может называться либо оператором spread, либо оператором rest.
//
// Как вы уже знаете, когда оператор spread стоит перед массивом или строкой, он разделяет их на отдельные значения.
// Оператор rest, хотя и имеет такой же синтаксис в виде ..., но предназначен для другого.
//
// Сейчас будем разбираться, для чего. Пусть у нас есть функция, принимающая два параметра:
//
// function func(a, b) {
// 	console.log(a);
// 	console.log(b);
// }
// Вы должны уже знать, что если в функцию передать лишние параметры, это не приведет к ошибке:
//
// func(1, 2, 3, 4, 5);
// Оператор rest позволяет получить все лишние параметры в виде массива.
// Для этого в функцию добавляется еще один параметр (обязательно последним), перед которым пишутся 3 точки:
//
// function func(a, b, ...rest) {
//
// }
// Эти три точки и есть оператор rest, а имя переменной может иметь любое название, но обычно также принято называть его rest.
//
// Давайте вызовем нашу функцию с избыточным количеством параметров и посмотрим, что попадает в параметры a и b, а что - в остаток rest:
//
// func(1, 2, 3, 4, 5);
//
// function func(a, b, ...rest) {
// 	console.log(a);    // выведет 1
// 	console.log(b);    // выведет 2
// 	console.log(rest); // выведет [3, 4, 5]
// }
// Если лишних параметров не будет, то в переменную rest запишется пустой массив:
//
// func(1, 2);
//
// function func(a, b, ...rest) {
// 	console.log(a);    // выведет 1
// 	console.log(b);    // выведет 2
// 	console.log(rest); // выведет []
// }
// В функции вообще может не быть параметров, но при этом в нее можно добавить rest.
// В этом случае функцию можно будет вызвать с любым количеством параметров и все они будут попадать в массив rest:
//
// function func(...rest) {
// 	console.log(rest);
// }


// 293 Сумма цифр / Функция, находящая сумму чисел с помощью операторов rest и spread в JavaScript
//
// Давайте напишем функцию, которая будет принимать параметрами произвольное количество чисел и возвращать их сумму.
//
// Вот примеры работы нашей функции:
//
// console.log( func(1, 2, 3)       ); // выведет 6
// console.log( func(1, 2, 3, 4)    ); // выведет 10
// console.log( func(1, 2, 3, 4, 5) ); // выведет 15
// Для начала давайте сделаем так, чтобы все переданные параметрами числа попадали в массив:
//
// function func(...nums) {
// 	console.log(nums);
// }
//
// func(1, 2, 3); // выведет [1, 2, 3]
// А теперь запустим цикл по переданному массиву и найдем сумму переданных чисел:
//
// function func(...nums) {
// 	let sum = 0;
//
// 	for (let num of nums) {
// 		sum += num;
// 	}
//
// 	return sum;
// }
//
// let result = func(1, 2, 3);
// console.log(result); // выведет 6


// 1 Напишите функцию, которая будет принимать параметрами произвольное количество чисел и
// возвращать их среднее арифметическое.
//
// function func(...rest) {
//     let sum = 0;
//
//     for (let el of rest) {
//         sum += el;
//     }
//
//     return sum / rest.length;
// }
//
// console.log(func(1, 2, 3, 4, 5));


// 294 Массивы в двухмерный / Функция, сливающая массивы в двухмерный в JavaScript
//
// Давайте сделаем функцию unite, которая параметрами будет принимать произвольное количество массивов и сливать их в один двухмерный.
//
// Вот пример работы описанной функции:
//
// let result = unite([1, 2, 3], [4, 5, 6], [7, 8, 9]);
// console.log(result); // выведет [ [1, 2, 3,] [4, 5, 6], [7, 8, 9] ]
// Не смотря на достаточную сложность функции, ее реализация с помощью оператора rest будет очень лаконичной:
//
// function unite(...arrs) {
// 	return arrs;
// }


// 295 Массивы в один / Функция, сливающая массивы в один в JavaScript
//
// Давайте теперь реализуем функцию merge, параметрами принимающую произвольное количество массивов и сливающую их элементы в один массив.
//
// Вот пример работы нашей функции:
//
// let result = merge([1, 2, 3], [4, 5, 6], [7, 8, 9]);
// console.log(result); // выведет [1, 2, 3, 4, 5, 6, 7, 8, 9]
// Приступим к реализации. Давайте для начала получим переданные массивы в виде одного двухмерного:
//
// merge([1, 2, 3], [4, 5, 6], [7, 8, 9]);
//
// function merge(...arrs){
// 	console.log(arrs); // выведет  [ [1, 2, 3,] [4, 5, 6], [7, 8, 9] ]
// }
// Давайте теперь сольем этот двухмерный массив в одномерный. Используем для этого метод concat и оператор spread:
//
// let arrs   = [ [1, 2, 3,], [4, 5, 6], [7, 8, 9] ];
//
// let result = [].concat(...arrs);
// console.log(result); // выведет [1, 2, 3, 4, 5, 6, 7, 8, 9]
// Давайте добавим этот код в нашу функцию merge:
//
// function merge(...arrs) {
// 	return [].concat(...arrs);
// }
//
// let result = merge([1, 2, 3], [4, 5, 6], [7, 8, 9]);
// console.log(result); // выведет [1, 2, 3, 4, 5, 6, 7, 8, 9]
// Как вы видите, эта функция также получилась очень лаконичной.


