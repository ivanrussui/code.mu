// 19_Time_311-336
// Время


// 311 Работа с объектом Date / Работа с объектом Date в JavaScript
//
// Сейчас мы с вами начнем изучать работу с датами на JavaScript. Для этого нам понадобится объект Date,
// с помощью которого в JavaScript можно осуществлять различные манипуляции с датами.
//
// Объект с датой создается следующим образом:
//
// new Date();
// Давайте запишем созданный объект в какую-нибудь переменную, к примеру, в переменную date:
//
// let date = new Date();
// После проделанной операции переменная date будет представлять собой объект, хранящий в себе текущий момент времени
// (секунду, минуту, час и так далее).
//
// Используя этот объект с помощью специальных методов мы можем получить нужные нам характеристики времени, например,
// текущий час, текущий день или текущий месяц.
//
// К примеру, текущий час можно получить так: date.getHours(), а текущий месяц - вот так date.getMonth(). Смотрите все варианты:
//
// let date = new Date();
//
// console.log(date.getFullYear()); // год
// console.log(date.getMonth());    // месяц
// console.log(date.getDate());     // день
//
// console.log(date.getHours());    // часы
// console.log(date.getMinutes());  // минуты
// console.log(date.getSeconds());  // секунды
//
// Учтите, что месяц, который возвращает метод getMonth, начинается с нуля - январь нулевой, февраль первый и так далее.


// // 1 Выведите на экран текущий день.
//
// let date = new Date();
//
// console.log(date.getDate());
//
//
// // 2 Выведите на экран текущий месяц.
//
// console.log(date.getMonth());
//
//
// // 3 Выведите на экран текущий год.
//
// console.log(date.getFullYear());


// 312 Форматирование даты / Форматирование даты в JavaScript
//
// Давайте теперь научимся выводить дату в определенном формате.
// Пусть, к примеру, мы хотим вывести на экран текущие день, месяц и год в формате год-месяц-день.
//
// Давайте сделаем это:
//
// let date = new Date();
// console.log(date.getFullYear() + '-' + date.getMonth() + '-' + date.getDate());
// Наш код, однако, имеет проблему: номера месяцев будут начинаться с нуля, а нам, скорее всего, хотелось бы,
// чтобы они начинались с единицы.
//
// Исправим проблему:
//
// let date = new Date();
// console.log(date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate());
// Наш код, однако, все равно не совершенен. Но заметить это можно только в определенные месяцы и в определенные дни.
// Пусть, к примеру, сейчас 5-го марта 2020 года.
//
// В этом случае наша дата выведется в формате 2020-3-5. А нам хотелось бы,
// чтобы дата вывелась в формате 2020-03-05 - с нулями перед номерами дней и месяцев из одной цифры.
//
// Для решения проблемы напишем функцию addZero, которая будет добавлять нули перед числами от 0 до 9:
//
// function addZero(num) {
// 	if (num >= 0 && num <= 9) {
// 		return '0' + num;
// 	} else {
// 		return num;
// 	}
// }
// Применим созданную функцию и теперь действительно получим дату в нужном нам формате:
//
// let date = new Date();
//
// console.log(
// 	addZero(date.getFullYear()) + '-' +
// 	addZero(date.getMonth() + 1) + '-' +
// 	addZero(date.getDate())
// );


// 1 Выведите на экран текущую дату-время в формате 12:59:59 31.12.2014.
// Используйте для всех частей даты (кроме года) созданную нами функцию для добавления нуля при необходимости
//
// let date = new Date();
//
// function addZero(num) {
//     if (num >= 0 && num <= 9) {
//         return '0' + num;
//     } else {
//         return num;
//     }
// }
//
// console.log(addZero(date.getHours()) + ':' + addZero(date.getMinutes()) + ':' + addZero(date.getSeconds()) + ' ' +
//             addZero(date.getDate()) + '.' + addZero(date.getMonth() + 1) + '.' + date.getFullYear() + '.');
//
// console.log(`${addZero(date.getHours())}:${addZero(date.getMinutes())}:${addZero(date.getSeconds())} ${addZero(date.getDate())}.${addZero(date.getMonth() + 1)}.${date.getFullYear()}.`);


// 313 Смена формата даты / Смена формата даты в JavaScript
//
// Давайте теперь научимся менять формат даты. Пусть, к примеру, у нас есть строка с датой в формате год-месяц-день.
// Давайте поменяем формат этой даты на другой, к примеру, на такой: день/месяц/год.
//
// Давайте решим задачу на конкретном примере. Пусть в переменной date лежит дата '2025-12-31'.
// Давайте преобразуем эту дату в '31/12/2025'
//
// Для решения задачи разобьем нашу строку '2025-12-31' в массив, используя метод split с разделителем дефисом.
// В результате в нулевом элементе массива окажется год, в первом - месяц, во втором - день:
//
// let str = '2025-12-31';
// let arr = str.split('-');
// console.log(arr); // получим массив ['2025', '12', '31']
// Теперь, обращаясь к разным элементам массива по их ключам, сформируем нужную нам строку:
//
// let str = '2025-12-31';
// let arr = str.split('-');
// let res = arr[2] + '/' + arr[1] + '/' + arr[0];
//
// console.log(res); // получим строку '31/12/2025'
// Можно также использовать комбинацию методов split, reverse и join:
//
// let str = '2025-12-31';
// let res = str.split('-').reverse().join('/');
//
// console.log(res); // получим строку '31/12/2025'


// 1 Дана дата в формате год-месяц-день. Преобразуйте эту дату в формат день.месяц.год.
//
// let str = '2023-11-12';
//
//
// // разбивая на массив
// let arr = str.split('-');
//
// // конкатинация
// // let res = arr[2] + '.' + arr[1] + '.' + arr[0];
//
// // шаблонная строка
// let res = `${arr[2]}.${arr[1]}.${arr[0]}`;
//
//
// // split, reverse и join:
// // let res = str.split('-').reverse().join('.');
//
// console.log(res);


// 314 Получения дня недели / Получения дня недели на JavaScript
//
// С помощью объекта Date можно также получить номер текущего дня недели. Делается это с помощью метода getDay. Этот метод возвращает числа от 0 до 6-ти, причем неделя начинается с воскресенья и этот день имеет номер 0. Понедельник - это день номер 1, вторник - номер 2 и так далее.
//
// Давайте посмотрим работу метода getDay на примере. Пусть, к примеру, сегодня вторник. Тогда следующий код выведет число 2:
//
// let date = new Date();
// console.log(date.getDay());


// 1 Выведите на экран номер текущего дня недели.
// console.log(new Date().getDay());


// 2 Определите, является ли текущий день недели выходным или рабочим днем.
// let dateToday = new Date().getDay();
//
// if (dateToday === 0 || dateToday === 6) {
//     console.log('Сегодня выходной');
// } else {
//     console.log('Сегодня рабочий');
// }


// 3 Определите сколько дней осталось до ближайшего воскресенья.
// let dateToday = new Date().getDay();
// console.log(dateToday);
//
// function getDaysOfSunday(dateToday) {
//     let res = 7 - dateToday;
//     console.log(`До ближайшего воскресенья осталось ${res} дней`);
// }
//
// getDaysOfSunday(dateToday);

// const getDaysOfSunday = () => 7 - new Date().getDay();
// console.log(getDaysOfSunday());


// 315 Вывод даты словом / Вывод частей даты словом в JavaScript
//
// Вы уже умеете выводить день недели в виде числа с помощью метода getDay. Зачастую, однако,
// нам нужен не номер дня недели, а его текстовое название. Давайте напишем код, который будет преобразовывать числа,
// возвращаемые методом getDay, в соответствующие названия дней недели.
//
// Для начала напишем код, который будет выводить номер текущего дня недели:
//
// let date = new Date();
// let day = date.getDay();
//
// console.log(day);
// А теперь доработаем этот код так, чтобы на экран выводился не номер дня недели, а его название
// (для краткости воскресенье будет 'вс', понедельник 'пн' и так далее).
//
// Для решения задачи составим массив дней недели days и начнем его с воскресенья (так как это нулевой день):
//
// let days = ['вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'];
// Как с помощью этого массива вывести на экран, к примеру, 'вт'? Нужно передать в квадратных скобках номер этого дня
// (вторник имеет номер 2):
//
// let days = ['вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'];
// console.log(days[2]); // выведет 'вт'
// Однако, мы не хотим передавать день недели вручную, а хотим, чтобы JavaScript сам определил текущий день и вывел его
// название. Для этого нужно совместить то, что возвращает метод getDay, и наш массив days:
//
// let date = new Date();
// let day  = date.getDay();
// let days = ['вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'];
//
// console.log(days[day]);


// 1 Пусть дан следующий массив:
// let months = [
// 	'янв', 'фев', 'мар', 'апр', 'май', 'июн',
// 	'июл', 'авг', 'сен', 'окт', 'ноя', 'дек'
// ];
// Выведите с помощью этого массива название текущего месяца.

// let data = new Date();
// let month = data.getMonth();
//
// console.log(months[month]);


// 316 Установка времени / Установка времени в объекте Date в JavaScript
//
// Когда мы с вами создавали объект с датой вот таким образом: new Date(), - мы оставляли круглые скобки пустыми.
// В этом случае мы получали текущий момент времени.
//
// Можно, однако, поступить и по-другому - передать ему параметры в формате new Date(год, месяц, день, часы, минуты,
// секунды, миллисекунды) и в этом случае в переменную date запишется не текущий момент времени, а тот,
// который мы указали в параметрах. При этом при передаче параметром отсчет месяцев начинается с нуля.
//
// Параметры можно опускать с конца. При этом отсутствующие параметры для миллисекунд, секунд и часов считаются
// равными нулю, а для дней - единице. Год и месяц опускать нельзя.
//
// Давайте создадим объект с датой за определенный момент времени:
//
// let date = new Date(2025, 10, 5, 12, 59, 59);
// Возможность задания момента времени можно использовать, например, для того, чтобы узнать день недели за определенную дату:
//
// let date = new Date(2025, 10, 5); // установим 5 ноября 2025 года
// let day  = date.getDay();
// let days = ['вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'];
//
// console.log(days[day]);


// 1 Узнайте, какой день недели был в ваш день рождения.
// let date = new Date(1989, 6, 31);
// let day = date.getDay();
// let days = ['вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'];
//
// console.log(days[day]);


// 317 Формат timestamp / Получение времени в формате timestamp в JavaScript
//
// При работе с датой существует специальный формат timestamp, который в JavaScript показывает количество миллисекунд,
// прошедшее с 1-го января 1970 года по текущий (или заданный) момент времени.
//
// Существует специальный метод getTime, с помощью которого можно получить время в формате timestamp.
// Давайте, например, получим текущий момент времени в этом формате:
//
// let date = new Date();
// console.log(date.getTime());
// Получим заданный момент времени в формате timestamp:
//
// let date = new Date(2015, 11, 4, 23, 59, 59);
// console.log(date.getTime());


// 1 Выведите на экран timestamp, соответствующий дате 1 января 2025 года.
// let date = new Date(2025, 0, 1, 16, 20, 2, 1);
// let date = new Date(2025, 0, 1);
// console.log(date.getTime());


// 318 Разность между timestamp /  Разность между датами в формате timestamp в JavaScript
//
// Формат timestamp предназначен для нахождения разницы между датами. Давайте для примера получим разницу в
// миллисекундах между текущим и заданным моментом времени:
//
// let now  = new Date();
// let date = new Date(2015, 11, 4, 23, 59, 59);
//
// let diff = now.getTime() - date.getTime();
// console.log(diff);
// Очевидно, что чаще всего нам нужна разница не в миллисекундах, а в днях или в годах. Для этого просто нужно
// перевести милисекунды в нужное нам значение.
//
// Например, чтобы перевести милисекунды в секунды, нужно милисекунды поделить на 1000,
// чтобы секунды перевести в минуты, нужно секунды поделить на 60 и так далее.
//
// Давайте, например, переведем разницу между датами в минуты:
//
// console.log(diff / (1000 * 60));
// А теперь - в часы:
//
// console.log(diff / (1000 * 60 * 60));


// 1 Выведите на экран количество дней, прошедшее между 1 марта 1988 года и 10 января 2000 года.
// let date1988 = new Date(1988, 2, 1);
// let date2000 = new Date(2000, 0, 10);
// let diff = date2000 - date1988;
//
// console.log(diff / (1000 * 60 * 60 * 24));


// 2 Выведите на экран количество месяцев, прошедшее между вашим рождением и текущим моментом времени.
// let dateBirthDay = new Date(1989, 6, 31, 1, 1, 1, 1);
// let dateNow = new Date();
// let diff = dateNow - dateBirthDay;
// let months = diff / (1000 * 60 * 60 * 24 * 30);
//
// console.log(diff);
// console.log(months);


// 319 Разность объектов с датами / Разница между объектами с датой в JavaScript
//
// В предыдущих уроках для нахождения разницы между датами мы использовали формат timestamp.
// Однако, на самом деле, в JavaScript это не обязательно: даты, представленные в виде объекта Date,
// можно вычитать друг из друга, и результат их вычитания - разница в миллисекундах.
//
// Для примера давайте выведем количество миллисекунд, которые прошли с 25 мая 2015, 12:59:59 по настоящий момент времени:
//
// let now  = new Date();
// let date = new Date(2015, 4, 25, 12, 59, 59);
//
// let diff = now - date; // вычитаем два объекта с датами друг от друга
// console.log(diff);     // увидим разницу в миллисекундах


// // 1 Выведите на экран количество миллисекунд, прошедшее между 1 сентября 2000 года и 15 февраля 2010 года
// let date2000 = new Date(2000, 8, 1);
// let date2010 = new Date(2010, 1, 15);
// let diff = date2010 - date2000;
//
// console.log(diff);
//
// // 2 Модифицируйте предыдущую задачу так, чтобы на экран выводилась разница в днях.
// console.log(diff / (1000 * 60 * 60 * 24));
//
// // 3 Модифицируйте предыдущую задачу так, чтобы на экран выводилась разница в месяцах.
// console.log(diff / (1000 * 60 * 60 * 24 * 30));
//
// // 4 Модифицируйте предыдущую задачу так, чтобы на экран выводилась разница в годах.
// console.log(diff / (1000 * 60 * 60 * 24 * 30 * 12));


// 320 Автоматическая корректировка дат / Автоматическая корректировка дат в JavaScript
//
// JavaScript имеет очень интересную и полезную особенность: если при создании объекта Date был указан некорректный
// момент времени - он автоматически будет пересчитан в корректный. Давайте посмотрим на примере.
//
// Как вы знаете, даты 35 января не существует. Максимально возможный день января - 31. Получается, что наша дата
// 35 января имеет 4 лишних дня. JavaScript в таком случае просто прибавит эти лишние 4 дня к следующему месяцу:
//
// let date = new Date(2018, 0, 35);
// console.log(date); // получится 4 февраля
// Можно указывать не только лишние дни, но и месяцы. При этом следует помнить, что месяцы начинаются с нуля,
// а значит последний корректный месяц - 11-тый. Если указать 12-тый месяц, то получится январь следующего года:
//
// let date = new Date(2018, 12, 1); // указываем 12-тый месяц
// console.log(date); // получится 1 января 2019 года
// Описанная корректировка работает и в меньшую сторону. Как вы знаете, самым минимальным днем месяца является день
// с номером 1. Поэтому, если указать день с номером 0, то получится последний день предыдущего месяца:
//
// let date = new Date(2018, 1, 0); // указываем нулевой день
// console.log(date); // получится 31 января
// Можно также указывать отрицательные значения дней и месяцев. При этом нужно помнить, что минимальный день имеет
// номер 1, а минимальный месяц - номер 0. Это значит, что минус первый день попадает во 2 день с конца предыдущего
// месяца, а минус первый месяц попадает просто в последний месяц предыдущего года:
//
// let date = new Date(2018, 1, -1); // указываем -1 день
// console.log(date); // получится 30 января
// let date = new Date(2018, -1, 1); // указываем -1 месяц
// console.log(date); // получится 1 декабря 2017 года
// Все сказанное выше аналогично работает с часами, минутами и секундами:
//
// let date = new Date(2018, 0, 1, 24, 0, 0); // указываем 24-тый час
// console.log(date); // получится 2 января, 0 часов
// let date = new Date(2018, 0, 1, 25, 0, 0); // указываем 25-тый час
// console.log(date); // получится 2 января, 1 час


// 321 Нахождение последнего дня месяца / Нахождение последнего дня месяца в JavaScript
//
// Используем изученную нами ранее автоматическую корректировку дат, чтобы легко решить нашу задачу.
// Ведь в JavaScript последний день месяца - это нулевой день следующего месяца.
//
// Для примера определим количество дней в марте 2020 года. Для этого при создании объекта с датой укажем нулевой день
// апреля (он имеет номер 3, так как нумерация месяцев с нуля):
//
// let date = new Date(2020, 3, 0);
// console.log(date.getDate());


// 1 Оформите этот способ решения проблемы в виде функции,
// которая параметрами будет принимать месяц и год и возвращать номер последнего дня этого месяца.
// let getNumberLastDayMonth = (month, year) => new Date(year, month, 0).getDate();
//
// console.log(getNumberLastDayMonth(1, 2023));
//
//
// // 2 Определите, какой день недели будет в последнем дне пятого месяца 2025 года.
// let days = ['вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'];
//
// let date = new Date(2025, 4, 0);
// let day = date.getDay();
//
// console.log(days[day]);
//
//
// // решение через функцию
// let getDayOfTheWeek = (month, year) => {
//     let numberLastDayMonth = new Date(year, month, 0).getDay();
//     return days[numberLastDayMonth];
// };
//
// console.log(getDayOfTheWeek(4, 2025));


// 322 Определение високосного года / Определение високосного года в JavaScript
//
// Используя изученные ранее приемы, мы можем легко определить для любого года, високосный он или нет:
// просто необходимо узнать, сколько дней в феврале. Для этого нам нужно взять нулевой день марта:
//
// let date = new Date(2020, 2, 0);
// console.log(date.getDate()); // выведет 29, тк 2020 год - високосный
// Усовершенствуем наш код так, чтобы тип года выводился текстом:
//
// let date = new Date(2020, 2, 0);
//
// if (date.getDate() == 29) {
// 	console.log('високосный');
// } else {
// 	console.log('обычный');
// }


// 1 Сделайте функцию isLeap, которая параметром будет принимать год и возвращать true, если этого год високосный,
// и false - если нет.
//
// function isLeap(year) {
//     let date = new Date(year, 2, 0);
//     return date.getDate() === 29;
// }
//
// console.log(isLeap(2023));


// 323 Проверка корректности даты / Проверка корректности даты в JavaScript
//
// Давайте теперь научимся проверять дату на корректность. Например, 31 января - это корректная дата,
// а 32 января - некорректная. Как вы знаете, JavaScript автоматически корректирует даты.
// В нашем случае это значит, что 32 января автоматически станет 1 февраля.
//
// Такое свойство JavaScript можно использовать для того, чтобы проверить дату на существование.
// Как будем проверять: создадим объект с датой и посмотрим, поменялись ли части даты или нет.
// Другими словами, выполнил ли JavaScript корректировку нашей даты или нет.
// Если выполнил - значит переданная нами дата некорректна, а если не выполнил - корректна.
//
// Давайте сделаем описанное:
//
// let year  = 2025;
// let month = 0;
// let day   = 32;
//
// let date = new Date(year, month, day);
//
// if (date.getFullYear() == year && date.getMonth() == month && date.getDate() == day) {
// 	console.log('корректна');
// } else {
// 	console.log('некорректна');
// }


// 1 Сделайте функцию checkDate, которая будет выполнять описанную проверку. Пусть функция возвращает true,
// если дата корректна и false, если нет. Пример работы этой функции для 31 января и 32 января:
//
// console.log(checkDate(2025, 0, 31)); // выведет true
// console.log(checkDate(2025, 0, 32)); // выведет false
//
// function checkDate(year, month, day) {
//     let date = new Date(year, month, day);
//     return date.getFullYear() === year && date.getMonth() === month && date.getDate() === day;
// }


// 324 Получение дня текущего года / Получение дня текущего года в JavaScript
//
// Давайте получим объект с датой, содержащий 8-е марта текущего года. Под словами текущий год имеется ввиду то,
// что скрипт должен работать в любом году, всегда получая тот год, который сейчас на планете.
//
// Для этого нам нужно сделать еще один вспомогательный объект с датой, содержащий текущий момент времени.
// С помощью этого объекта мы сможем получить текущий год,
// а затем использовать этот год при создании объекта с желаемой нами датой, вот так:
//
// let now  = new Date(); // получаем текущий момент
// let date = new Date(now.getFullYear(), 2, 8); // получаем нашу дату
// Полученный момент времени мы можем использовать, например, чтобы определить день недели, соответствующий этой дате:
//
// console.log(date.getDay());


// 1 Определите, какой день недели будет 31 декабря текущего года.
//
// let now = new Date();
// let date = new Date(now.getFullYear(), 11, 31);
//
// console.log(date.getDay());
//
// // используя массив с днями недели
// let days = ['вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'];
// let day = date.getDay();
//
// console.log(days[day]);


// 325 День следующего или предыдущего месяца
//
// Давайте узнаем день недели первого числа предыдущего месяца. Для этого от текущего месяца отнимем единицу:
//
// let now = new Date();
//
// let date = new Date(now.getFullYear(), now.getMonth() - 1, 1);
// console.log(date.getDay());


// 1 Вопрос: не будет ли проблемы, если текущий месяц январь? Ведь он имеет номер 0,
// и при вычитании из него единицы мы получим минус первый месяц.
//
// нет не будет, имитирую январь
// let now = new Date();
//
// console.log((now.getMonth() - 10) - 1);
//
// let date = new Date(now.getFullYear(), (now.getMonth() - 10) - 1, 1);
// console.log(date.getDay());


// 2 Определите, какой день недели был месяц назад в такой же день месяца, как сегодня.
// let now = new Date();
// let date = new Date(now.getFullYear(), now.getMonth() - 1, 13);
//
// console.log(date.getDay());


// 326 День следующего или предыдущего года
//
// Давайте получим объект с датой, содержащий 21 января следующего года. Для этого прибавим к текущему году единицу:
//
// let now  = new Date();
// let date = new Date(now.getFullYear() + 1, 0, 21);


// 1 Определите, какой день недели будет 31 декабря следующего года.
//
// let now = new Date();
// let date = new Date(now.getFullYear() + 1, 11, 31);
//
// console.log(date.getDay());


// 2 Определите, какой день недели будет через год в такую же дату, как сегодня.
//
// let now = new Date();
// let date = new Date(now.getFullYear() + 1, now.getMonth(), now.getDate());
//
// console.log(date.getDay());


// 3 Определите, какой день недели был год назад в такую же дату, как сегодня.
//
// let now = new Date();
// let date = new Date(now.getFullYear() - 1, now.getMonth(), now.getDate());
//
// console.log(date.getDay());


// 327 Разность моментов
//
// Давайте найдем разность между двумя моментами времени:
//
// let date1 = new Date();
// let date2 = new Date(2015, 4, 25, 12, 59, 59);
//
// console.log(date1 - date2); // разность в миллисекундах


// 1 Определите, сколько дней между 1 января и 10 сентября текущего года.
//
// let date1 = new Date(2023, 0, 1);
// let date2 = new Date(2023, 8, 10);
// let diff = date2 - date1;
//
// console.log(diff / (1000 * 60 * 60 * 24));


// 2 Определите, сколько дней между 20 числом текущего месяца и 10 числом следующего.
//
// let date1 = new Date(2023, 10, 20);
// let date2 = new Date(2023, 11, 10);
// let diff = date2 - date1;
//
// console.log(diff / (1000 * 60 * 60 * 24));


// 328 Момент времени дня
//
// Давайте получим объект с датой, содержащий полдень сегодняшнего дня:
//
// let now  = new Date();
// let date = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 12);
// А теперь полдень завтрашнего дня:
//
// let now  = new Date();
// let date = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, 12);


// 1 Определите, сколько часов прошло между вчерашним полднем и текущим моментом времени.
//
// let now  = new Date();
// let date = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 1, 12);
// let diff = now - date;
//
// console.log(diff / (1000 * 60 * 60));


// 329 Начало дня / Начало дня в JavaScript
//
// Давайте получим объект с датой, содержащий начало текущего дня:
//
// let now  = new Date();
// let date = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0);
// Как вы уже знаете, параметры объекта Date можно опускать с конца.
// В этом случае часы, минуты и секунды будут иметь значение 0. Опустим их:
//
// let now  = new Date();
// let date = new Date(now.getFullYear(), now.getMonth(), now.getDate());
// А вот день опустить нельзя, так как если он опущен, то примет значение 1, а нам нужен текущий день.
// Опустить месяц, не опуская год также нельзя по правилам работы с Date.
//
// Опустить одновременно год, месяц и день также нельзя - в этом случае возьмется текущий момент времени. Почему это
// плохо, ведь нам и нужен текущий год, текущий месяц и текущий день? Дело в том, что нам нужна полночь, то есть часы,
// минуты и секунды должны иметь значение 0, а в текущем моменте времени они будут иметь текущие значения, а не полночь.


// 1 Определите, сколько часов прошло между началом дня и текущим моментом времени.
//
// let now  = new Date();
// let date = new Date(now.getFullYear(), now.getMonth(), now.getDate());
// let diff = now - date;
//
// console.log(diff / (1000 * 60 * 60));
// console.log((diff / (1000 * 60 * 60)).toFixed(2));


// 330 Конец дня / Конец дня в JavaScript
//
// Давайте получим объект с датой, содержащий конец текущего дня:
//
// let now  = new Date();
// let date = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59);
// Можно посчитать концом текущего дня полночь следующего (разница в 1 секунду):
//
// let now  = new Date();
// let date = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, 0, 0, 0);
// Как вы уже знаете, нули в таком случае можно опустить:
//
// let now  = new Date();
// let date = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1);
// Кстати, полночью также будет является время 24:00:00 текущего дня:
//
// let now  = new Date();
// let date = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 24, 0, 0);
// Опустим нули:
//
// let now  = new Date();
// let date = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 24);


// 1 Определите, сколько часов осталось до конца дня.
//
// let now  = new Date();
// let date = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 24);
// let diff = date - now;
//
// console.log(diff / (1000 * 60 * 60));
// console.log((date.getTime() - now) / (1000 * 60 * 60));


// 331 Циклическая проверка моментов времени / Циклическая проверка моментов времени в JavaScript
//
//

