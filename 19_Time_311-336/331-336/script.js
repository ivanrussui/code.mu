// 19_Time_331-336
// Время


// 331 Циклическая проверка моментов времени / Циклическая проверка моментов времени в JavaScript
//
// Давайте найдем все первые числа месяцев текущего года, которые являются воскресеньем:
//
// let now  = new Date();
// let year = now.getFullYear();
//
// for (let month = 0; month <= 11; month++) {
// 	let date = new Date(year, month, 1);
//
// 	if (date.getDay() == 0) {
// 		console.log(year + '-' + month + '-1');
// 	}
// }


// 1 Рассмотрите промежуток от 2000 года до текущего года. Определите, сколько раз 1 января в этом промежутке попадало
// на выходной день, то есть на субботу или на воскресенье.
//
// let now = new Date();
// let counter = 0;
//
// for (let year = 2000; year <= now.getFullYear(); year++) {
//         let date = new Date(year, 0, 1);
//
//         if (date.getDay() === 6 || date.getDay() === 0) {
//             counter ++;
//         }
// }
// console.log(`1 января было выходным ${counter} раз`);


// сколько раз 1 число месяца было выходным
// let now = new Date();
// let counter = 0;
//
// for (let year = 2000; year <= now.getFullYear(); year++) {
//     for (let month = 0; month <= 11; month++) {
//         let date = new Date(year, month, 1);
//
//         if (date.getDay() === 6 || date.getDay() === 0) {
//             counter ++;
//         }
//     }
// }
// console.log(`1 число месяца было выходным ${counter} раза`);


// все даты когда 1 число месяца суб или воскр
// let now = new Date();
//
// for (let year = 2000; year <= now.getFullYear(); year++) {
//     for (let month = 0; month <= 11; month++) {
//         let date = new Date(year, month, 1);
//
//         if (date.getDay() === 6 || date.getDay() === 0) {
//             console.log(year + '-' + month + '-1');
//         }
//     }
// }


// 332 Практика на получение моментов времени / Практика на получение моментов времени в JavaScript

// 1 Определите, сколько секунд прошло с начала дня до настоящего момента времени.
// let now = new Date();
// let date = new Date(now.getFullYear(), now.getMonth(), now.getDate());
//
// let diff = now - date;
//
// // через getTime() разницы нет
// // let diff = now.getTime() - date.getTime();
//
// console.log(diff / 1000);


// 2 Определите, сколько секунд осталось до конца дня.
// let now = new Date();
// let date = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 24);
// let diff = date - now;
//
// console.log(diff / 1000);


// 3 Определите, сколько дней осталось до нового года.
// let now = new Date();
// let date = new Date(2024, 0, 1);
// let diff = date - now;
//
// console.log(diff / (1000 * 60 * 60 * 24));


// 4 Определите, сколько пятниц 13-е в текущем году.
// let now = new Date();
// let counter = 0;
//
// for (let month = 0; month <= 11 ; month++) {
//     let date = new Date(now.getFullYear(), month, 13);
//
//     // if (date.getDay() === 5) {
//     //     counter++;
//     // }
//
//     date.getDay() === 5 && counter++;
// }
//
// console.log(counter);


// 5 Определите, какой год был 3 месяца назад.
// let now = new Date()
// let date = new Date(now.getFullYear(), now.getMonth() - 3, now.getDate())
//
// console.log(date.getFullYear());


// 6 Определите, какой день недели будет в последнем дне текущего месяца.
// let now = new Date();
// let date = new Date(now.getFullYear(), now.getMonth() + 1, 0);
//
// console.log(date.getDay());


// 7 Напишите код, который будет определять, високосный ли текущий год.
// let now = new Date();
// let date = new Date(now.getFullYear(), 2, 0);
//
// if (date.getDate() === 29) {
//     console.log('Год високосный');
// } else {
//     console.log('Год не високосный');
// }


// 8 Напишите код, который будет находить предыдущий високосный год.
// let now  = new Date();
//
// for (let year = now.getFullYear(); year > 0; year--) {
//     // console.log(year);
// 	let date = new Date(year, 2, 0);
//     // console.log(date);
//
// 	if (date.getDate() === 29) {
// 		console.log(year);
//         break;
// 	}
// }


// 9 Напишите код, который будет находить следующий високосный год.
// let now = new Date();
//
// for (let year = now.getFullYear(); year > 0; year++) {
//     let date = new Date(year, 2, 0);
//
//     if (date.getDate() === 29) {
//         console.log(year);
//         break;
//     }
// }


// 333 Строковое сравнение дат / Строковое сравнение дат на JavaScript
//
// Пусть у нас есть две даты в следующем текстовом формате:
//
// let date1 = '2020-12-01';
// let date2 = '2019-12-01';
// В таком случае можно выполнить сравнение этих дат и узнать, какая из этих дат больше:
//
// console.log(date1 > date2); // выведет true
// Каким образом происходит сравнение этих дат? Дело в том, что наши даты представляют собой строки и JavaScript
// сравнивает их как строки. То есть он сначала сравнивает первые символы двух дат: если они одинаковы, то JavaScript
// сравнивает вторые символы, и так далее, пока не найдет отличия. Благодаря тому, что в нашем формате даты сначала
// расположен год, потом месяц, а потом день, и возможно такое сравнение.
//
// Дело в том, что если цифра первого года оказывается больше цифры второго года, значит уже не имеет значения,
// что там с месяцами и днями - первый год точно больше. Если же годы совпадают, то больше будет та дата,
// у которой больше месяц. А если и месяцы совпадают, то больше будет та дата, у которой больше день.
// Ну, а если и дни одинаковы, то и даты равны.
//
// Важно также, чтобы даты были в одном формате. В нашем случае разделителями частей дат являются дефисы.
// Это, конечно же, не обязательно. Например, можно поставить точки:
//
// let date1 = '2020.12.01';
// let date2 = '2019.12.01';
// Или вообще убрать разделители:
//
// let date1 = '20201201';
// let date2 = '20191201';
// Главное, чтобы сравнение было корректным, размещение должно быть следующим: сначала год, потом месяц, потом день.


// 1 Напишите код, который сравнит две приведенные ниже даты и выведет сообщение о том, какая из них больше:
//
// let date1 = '2020-11-31';
// let date2 = '2020-12-01';
//
// if (date1 > date2) {
//     console.log(date1, 'больше');
// } else {
//     console.log(date2, 'больше');
// }
//
// date1 > date2 ? console.log(date1, 'больше') : console.log(date2, 'больше');


// 334 Сравнение даты без года / Сравнение даты без года в JavaScript
//
// Необязательно сравнивать года. Дата может состоять просто из месяца и дня:
//
// let date1 = '12-01';
// let date2 = '11-01';
//
// console.log(date1 > date2);


// 1 Напишите код, который сравнит две приведенные ниже даты и выведет сообщение о том, какая из них больше:
//
// let date1 = '09-21';
// let date2 = '09-23';
//
// date1 > date2 ? console.log(date1, 'больше') : console.log(date2, 'больше');


// 335 Попадание даты в промежуток
//
// Пусть есть три промежутка: с 1 января по 8 марта, с 9 марта по 17 июня, с 18 июня по 31 декабря.
// Пусть у нас также есть какая-то дата, содержащая месяц и день. Давайте определим, в какой промежуток попадает эта дата:
//
// let date = '08-20';
//
// if (date >= '01-01' && date <= '03-08') {
// 	console.log('1 промежуток');
// }
//
// if (date >= '03-09' && date <= '06-17') {
// 	console.log('2 промежуток');
// }
//
// if (date >= '06-18' && date <= '12-31') {
// 	console.log('3 промежуток');
// }


// 1 Дана дата, содержащая месяц и день. Определите знак Зодиака, на которую приходится эта дата.
//
// let date = '07-31';
//
// if (date >= '03-21' && date <= '04-20') {
//     console.log('Овен');
// }
//
// if (date >= '04-21' && date <= '05-20') {
//     console.log('Телец');
// }
//
// if (date >= '05-21' && date <= '06-21') {
//     console.log('Близнецы');
// }
//
// if (date >= '06-22' && date <= '07-22') {
//     console.log('Рак');
// }
//
// if (date >= '07-23' && date <= '08-23') {
//     console.log('Лев');
// }
//
// if (date >= '08-24' && date <= '09-23') {
//     console.log('Дева');
// }
//
// if (date >= '09-24' && date <= '10-23') {
//     console.log('Весы');
// }
//
// if (date >= '10-24' && date <= '11-22') {
//     console.log('Скорпион');
// }
//
// if (date >= '11-23' && date <= '12-21') {
//     console.log('Стрелец');
// }
//
// if (date >= '12-22' && date <= '01-20') {
//     console.log('Козерог');
// }
//
// if (date >= '01-21' && date <= '02-20') {
//     console.log('Водолей');
// }
//
// if (date >= '02-21' && date <= '03-20') {
//     console.log('Рыбы');
// }


// Сравнение объектов с датой / Сравнение объектов с датами в JavaScript
//
// Можно сравнивать не только строки, но и объекты с датами. Посмотрим на примере. Пусть нас есть два объекта с датами,
// которые мы создали через new Date и записали в переменные. Давайте сравним, какая дата больше:
//
// let date1 = new Date(2020, 1, 1);
// let date2 = new Date(2019, 1, 1);
//
// console.log(date1 > date2); // выведет true
// Пусть теперь первая дата будет меньше второй:
//
// let date1 = new Date(2020, 1, 1);
// let date2 = new Date(2021, 1, 1);
//
// console.log(date1 > date2); // выведет false


// 1 Получите объект с датой, содержащий текущий момент времени. Получите объект с датой,
// содержащий полдень текущего дня. Сравните два этих объекта и определите, был ли уже полдень или нет.
//
// let now = new Date();
// let noon = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 12, 0);
//
// if (now > noon) {
//     console.log('Полдень уже был сегодня');
// } else {
//     console.log('Полдень еще не был сегодня');
// }


// 2 Получите объект с датой, содержащий текущий момент времени. Получите объект с датой,
// содержащий 15 число текущего месяца. Сравните два этих объекта и определите, прошла ли уже половина месяца или нет.
//
// let now = new Date();
// let middle = new Date(now.getFullYear(), now.getMonth(), 15);
//
// if (now > middle) {
//     console.log('Половина месяца прошла');
// } else {
//     console.log('Половина месяца не прошла');
// }
