// 10_Types_of_Functions_223-239
// Типы функций


// 223 Исходный код функции и результат

// В JavaScript можно написать имя функции без круглых скобок. В этом случае мы увидим не результат работы функции, а ее исходный код.
//
//     Давайте попробуем. Пусть у нас есть какая-то функция, например, такая:
//
// function func() {
//     return '!';
// }
// Давайте вызовем эту функцию, написав ее имя и круглые скобки. В этом случае мы увидим результат работы функции:
//
//     function func() {
//         return '!';
//     }
//
// console.log(func()); // выведет '!'
// А теперь давайте попробуем опустить после имени функции круглые скобки. В этом случае мы увидим исходный код нашей функции:
//
//     function func() {
//         return '!';
//     }
//
// console.log(func); // увидим код функции


// 224 Функция как переменная

// // 1 Сделайте функцию func, которая будет возвращать через return какую-либо строку.
//
// function func() {
//     return 'JavaScript';
// }
//
// // 2 Выведите результат работы функции func в консоль.
//
// console.log(func());
//
// // 3 Выведите исходный код функции func в консоль.
//
// console.log(func);
//
// // 4 Запишите в переменную func число 123, тем самым затерев функцию из этой переменной.
// // Выведите новое значение переменной func в консоль.
//
// func = 123;
// console.log(func);
// console.log(func());


// 225 Запись функции в другую переменную

// // 1 Сделайте функцию func1, которая будет возвращать через return число 3.
//
// function func1() {
//     return 3;
// }
//
// // 2 Скопируйте исходный код функции func1, в переменную func2.
//
// let func2 = func1;
// console.log(func1);
// console.log(func2);
//
// // 3 Выведите в консоль сумму результатов работы функций func1 и func2.
//
// console.log(func1() + func2());


// 226 Присваивание функций в переменные

// 1 Сделайте безымянную функцию, которая будет возвращать через return число 1. Запишите эту функцию в переменную func1.
//
// let func1 = function() {
//     return 1;
// }
//
// // console.log(func1());
//
//
// // 2 Сделайте безымянную функцию, которая будет возвращать через return число 2. Запишите эту функцию в переменную func2.
//
// let func2 = function() {
//     return 2;
// }
//
// // console.log(func2());
//
//
// // 3 Найдите сумму значений функций func1 и func2. Выведите эту сумму алертом в консоль.
//
// console.log(func1() + func2());


// 227 Совпадение имени функции и переменной
// Из описанного выше следует, что существование переменной и функции с одинаковым именем легко может привести к проблеме.
//
//     В следующем примере функция func будет затерта и вместо нее станет строка 'string':
//
// function func() {
//     return '!';
// }
//
// func = 'string'; // затрем переменную с функцией строкой
// func(); // получим ошибку, т.к. func - не функция
// Чтобы такого не происходило, следует придерживаться правила, общего для всех языков программирования:
// функции должны быть глаголами, а переменные - существительными.


// 228 Типы объявлений \ Function expression и Function declaration в JavaScript
//
// В JavaScript функцию можно объявить двумя способами.
//
//     Первый способ - это просто объявить функцию через function, сразу задав ее имя:
//
//     function func() {
//         console.log('!');
//     }
//
// func(); // выведет '!'
// Второй способ - это сделать безымянную функцию и записать ее в какую-либо переменную:
//
//     let func = function() {
//         console.log('!');
//     };
//
// func(); // выведет '!'
// По научному первый способ называется Function Declaration (объявление функции),
// а второй - Function Expression (функциональное выражение).


// 229 Разница объявлений функции
//
// Оба способа объявления функции эквивалентны, но есть существенная разница:
// функции, объявленные как Function Declaration, будут доступны, даже если обратится к ним до того, как они были объявлены.
//
//     Смотрите пример:
//
// // Обращаемся к функции до ее объявления:
//     func(); //выведет '!'
//
// function func() {
//     console.log('!');
// }
// А функциональные выражения создаются в момент выполнения кода и недоступны выше. Поэтому такой код выдаст ошибку:
//
//     func(); //ошибка, такой функции еще нет!
//
// let func = function() {
//     console.log('!');
// };


// 1 Создайте функцию как Function Declaration. Проверьте то, что она будет доступна выше места своего объявления.
//
// f();
//
// function f() {
//     console.log('function');
// }


// 2 Создайте функцию как Function Expression. Проверьте то, что она не будет доступна выше места своего объявления.
//
// f();
//
// let f = function () {
//     console.log('function not available');
// }


// 230 Точка с запятой при объявлении функций
//
// При объявлении функции как Function Declaration после фигурной скобки } точка с запятой не ставится:
//
//     function func() {
//         console.log('!');
//     }
// Если же функция объявлена Function Expression, то после } ставится точка с запятой:
//
//     let func = function() {
//         console.log('!');
//     };
// Почему: потому что в JavaScript любое выражение должно заканчиваться точкой с запятой, а в данном случае у нас как раз-таки выражение.
// Эта точка с запятой не обязательна, так как JavaScript вообще разрешает их не ставить, но желательна. Ставьте всегда:)


// 1 Расставьте точки с запятой во всех необходимых местах:
//
// let func1 = function() {console.log('!');};
// let func2 = function() {
// 	console.log('!');
// };
// function func3() {
// 	console.log('!');
// }


// 231 Нюансы функциональных выражений
//
// Название Function Expression (функциональное выражение) дано не просто так.
// Оно действительно означает это - то, что такие функции являются частью какого-либо выражения.
//
//     Например, мы можем сложить какую-нибудь строку и безымянную функцию:
//
//     let str = 'str' + function() {return 3;};
// console.log(str); // выведет 'strfunction() {return 3;}'
// Почему мы видим такой странный результат, а не число 3? Потому что второе слагаемое - это не результат работы функции,
// а ее исходный код (ведь мы эту функцию не вызвали, а просто написали).
//
// То есть название функциональное выражение обозначает то, что такая функция принимает участие в каком-нибудь выражении.
//
//     Присваивание к переменной тоже выражение:
//
//     let func = function() {
//         console.log('!');
//     };
// Можно также, к примеру, передать функцию в качестве параметра алерта и он выведет ее исходный код в консоль -
// это тоже будет считаться выражением:
//
//     console.log(function() {return 3;});
// Почему это важно: потому что отличие Function Declaration и Function Expression совсем не в том, что первая функция
// создается с именем, а вторая изначально имени не имеет. Это не так.
//
//     Пример. Вот у нас функция без имени, но при этом не участвует ни в каком выражении (то есть с ней не совершается
//     никаких действий, говоря по-простому):
//
// /*
// 	Данная функция будет Function Declaration,
// 	но с синтаксической ошибкой:
// */
// function() {
//     console.log('!');
// }
// Такой код вообще выдаст ошибку! Почему: так как функция не участвует ни в каком выражении, то браузер считает ее
// Function Declaration, но не находит ее имени и выдает ошибку.
//
//     Чтобы ошибка исчезла, нужно заставить функцию стать частью какого-либо выражения. Например, напишем перед ней операцию +:
//
// +function() { // такой код корректен
//     console.log('!');
// };
// Как это работает: сама по себе операция + ничего не делает, это все равно как написать вместо числа 3 число +3 - допустимо,
// но ничего не меняет.
//
//     Но в случае с функцией - меняет. Теперь наша функция уже не просто написана, а участвует в выражении.
//     Поэтому ошибки теперь не будет. Результата выполнения функции тоже не будет, ведь мы ее просто написали, но не вызвали.
//
//     Вместо + можно написать все, что угодно. Например:
//
// -function() { // такой код корректен
//     console.log('!');
// };
//
// !function() { // такой код корректен
//     console.log('!');
// };
// Можно также взять нашу функцию в круглые скобки, в этом случае она также станет функциональным выражением:
//
//     (function() { // такой код корректен
//         console.log('!');
//     });


// 232 Функция с именем, но Function Expression
//
// Давайте теперь сделаем функцию, которая будет иметь имя, но при этом будет Function Expression, потому что участвует в выражении:
//
//     +function func() {
//         console.log('!');
//     }
// Интересно, что по имени func мы не сможем обратиться к нашей функции, это будет приводить к ошибке:
//
//     +function func() {
//         console.log('!');
//     }
//
// func(); // выдаст ошибку
// Чтобы иметь возможность вызвать нашу функцию, ее нужно присвоить какой-нибудь переменной:
//
//     let test = function func() {
//         console.log('!');
//     };
//
// test(); // выведет '!'
// Еще раз: функция, являющаяся функциональным выражением не может быть вызвана по ее имени. Такая функция может быть
// вызвана только с использованием переменной, в которую была записана эта функция.
//
//     Но тем не менее, функциональное выражение может иметь имя функции, это будет синтаксически корректно.
//     Зачем такое нужно, мы будем разбираться в следующих уроках.
//
//     Подведем итог: функции являются Function Declaration или Function Expression не потому,
//     что имеют имя или не имеют, а потому, что являются участниками выражений или не являются.
//
//     Как вы видели выше, функция без имени может быть воспринята как Function Declaration,
//     а функции с именем может быть Function Expression.


// 233 Именованные функциональные выражения
//
// Пусть у нас есть вот такое функциональное выражение:
//
//     let test = function() {
//         console.log('!');
//     };
//
// test(); // выведет '!'
// Давайте нашей функции дадим имя func:
//
//     let test = function func() {
//         console.log('!');
//     };
//
// test();
// Как вы уже знаете, по этому имени не обратиться к функции:
//
//     let test = function func() {
//         console.log('!');
//     };
//
// test(); // выведет '!'
// func(); // выдаст ошибку
// Зачем же давать имя функции, если оно не будет доступно? Дело в том, что это имя будет недоступно снаружи функции,
// но доступно внутри этой функции.
//
//     Давайте проверим:
//
//     let test = function func() {
//         console.log(func); // функция выведет свой же исходный код
//     };
//
// test(); // вызываем функцию
// Давайте вызовем нашу функцию внутри нее самой:
//
//     let test = function func() {
//         console.log('!'); // выводим '!'
//         func(); // вызываем сами себя
//     };
//
// test();
// Если запустить данный код, то в консоль будет выводится бесконечное количество выводов в консоль.
//
//     На самом деле наша функция может быть вызвана внутри себя не только как func, но и как test:
//
//     let test = function func() {
//         console.log('!');
//         test(); // вызываем сами себя
//     };
//
// test();
// В чем же разница? Разница в том, что имя test - это просто переменная. В процессе работы скрипта наша функция может
// записаться в другую переменную или предаться параметром - в этом случае связь между переменной test и функцией может пропасть.
//
//     Имя func же жестко привязано к функции специально для того, чтобы можно было обратиться к нашей функции внутри нее самой.
//
//     Такие Function Expression с именем функции называются именованными функциональными выражениями.


// 234 Как проверить тип функции
